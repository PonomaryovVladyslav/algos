def length_of_lis(nums: list[int]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª–∏–Ω—ã **–Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (LIS)**.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ O(n^2)):
    1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ `dp`, –≥–¥–µ `dp[i]` ‚Äî –¥–ª–∏–Ω–∞ LIS, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–π—Å—è –Ω–∞ `nums[i]`.
    2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º `dp[i] = 1`, —Ç–∞–∫ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è LIS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äî –æ–Ω —Å–∞–º.
    3Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–≥–æ `nums[i]` –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ `nums[j]`, –≥–¥–µ `j < i`:
        - –ï—Å–ª–∏ `nums[j] < nums[i]`, –º–æ–∂–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å LIS: `dp[i] = max(dp[i], dp[j] + 1)`.
    4Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç ‚Äî `max(dp)`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n¬≤)** ‚Äî –¥–≤–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–∞.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** ‚Äî –º–∞—Å—Å–∏–≤ `dp`.

    :param nums: list[int] - –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
    :return: int - –¥–ª–∏–Ω–∞ –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """

    if not nums:
        return 0

    dp = [1] * len(nums)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ LIS ‚Äî 1

    for i in range(len(nums)):
        for j in range(i):
            if nums[j] < nums[i]:  # –ï—Å–ª–∏ –º–æ–∂–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)  # –ù–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ dp ‚Äî –æ—Ç–≤–µ—Ç


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(length_of_lis([10, 9, 2, 5, 3, 7, 101, 18]))  # 4
print(length_of_lis([0, 1, 0, 3, 2, 3]))  # 4
print(length_of_lis([7, 7, 7, 7, 7, 7, 7]))  # 1
print(length_of_lis([1, 3, 6, 7, 9, 4, 10, 5, 6]))  # 6


# üîπ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º O(n log n) —Å `bisect`
from bisect import bisect_left

def length_of_lis_optimized(nums: list[int]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª–∏–Ω—ã **–Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (LIS)**
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º **–±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ O(n log n)**.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–ì—Ä–µ–±—ë–Ω–∫–∞ O(n log n)):
    1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ `dp`, –≥–¥–µ `dp[i]` ‚Äî –Ω–∞–∏–º–µ–Ω—å—à–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è LIS –¥–ª–∏–Ω—ã `i + 1`.
    2Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–≥–æ `num` –∏—â–µ–º –º–µ—Å—Ç–æ –≤ `dp` —á–µ—Ä–µ–∑ `bisect_left`:
        - –ï—Å–ª–∏ `num` –±–æ–ª—å—à–µ –≤—Å–µ—Ö –≤ `dp`, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (LIS —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å).
        - –ò–Ω–∞—á–µ –∑–∞–º–µ–Ω—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π –±–æ–ª—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç (–æ–±–Ω–æ–≤–ª—è–µ–º LIS).
    3Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞ `dp` ‚Äî —ç—Ç–æ –æ—Ç–≤–µ—Ç.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n log n)** ‚Äî `n` –∏—Ç–µ—Ä–∞—Ü–∏–π —Å `log n` –ø–æ–∏—Å–∫–æ–º.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** ‚Äî –º–∞—Å—Å–∏–≤ `dp`.

    :param nums: list[int] - –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
    :return: int - –¥–ª–∏–Ω–∞ –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """

    dp = []  # –•—Ä–∞–Ω–∏–º –Ω–∞–∏–º–µ–Ω—å—à–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã LIS
    for num in nums:
        i = bisect_left(dp, num)  # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è num
        if i == len(dp):
            dp.append(num)  # –ï—Å–ª–∏ num –±–æ–ª—å—à–µ –≤—Å–µ—Ö, –¥–æ–±–∞–≤–ª—è–µ–º
        else:
            dp[i] = num  # –ò–Ω–∞—á–µ –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    return len(dp)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
print(length_of_lis_optimized([10, 9, 2, 5, 3, 7, 101, 18]))  # 4
print(length_of_lis_optimized([0, 1, 0, 3, 2, 3]))  # 4
print(length_of_lis_optimized([7, 7, 7, 7, 7, 7, 7]))  # 1
print(length_of_lis_optimized([1, 3, 6, 7, 9, 4, 10, 5, 6]))  # 6
