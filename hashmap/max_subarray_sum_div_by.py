def max_subarray_sum_divisible_by_k(nums: list[int], k: int) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–¥–º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç—Å—è –Ω–∞ k.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (O(n))**:
       1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º `prefix_sum` –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—É–º–º—ã.
       2Ô∏è‚É£ –•—Ä–∞–Ω–∏–º `mod_map`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç **–æ—Å—Ç–∞—Ç–∫–∏ –æ—Ç –¥–µ–ª–µ–Ω–∏—è** `prefix_sum % k`
       3Ô∏è‚É£ –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π `mod` —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è, –∑–Ω–∞—á–∏—Ç, —Å—É–º–º–∞ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ `k`
       4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º `max_sum`, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –±–æ–ª—å—à–∏–π –ø–æ–¥–º–∞—Å—Å–∏–≤.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(k)`, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –Ω–µ –±–æ–ª–µ–µ `k` –æ—Å—Ç–∞—Ç–∫–æ–≤.

    :param nums: list[int] - –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤.
    :param k: int - –î–µ–ª–∏—Ç–µ–ª—å.
    :return: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞, –¥–µ–ª—è—â–µ–≥–æ—Å—è –Ω–∞ `k`.
    """
    prefix_sum = 0
    max_sum = 0
    mod_map = {0: -1}  # –û—Å—Ç–∞—Ç–æ–∫ 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ subarray [0:i] –¥–µ–ª–∏—Ç—Å—è –Ω–∞ k

    for i, num in enumerate(nums):
        prefix_sum += num
        mod = prefix_sum % k

        if mod < 0:  # –î–µ–ª–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
            mod += k

        if mod in mod_map:
            max_sum = max(max_sum, prefix_sum - mod_map[mod])
        else:
            mod_map[mod] = prefix_sum  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞

    return max_sum


# üîπ –¢–µ—Å—Ç—ã
nums1, k1 = [3, 1, 4, 2, 6], 3
nums2, k2 = [4, 7, 9, 3, 2], 5

print(max_subarray_sum_divisible_by_k(nums1, k1))  # ‚úÖ 12
print(max_subarray_sum_divisible_by_k(nums2, k2))  # ‚úÖ 20
