def happy_numbers(n: int) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ `n` —Å—á–∞—Å—Ç–ª–∏–≤—ã–º.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (O(log n))**:
    1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º `set()` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.
    2Ô∏è‚É£ –ü–æ–∫–∞ `n` –Ω–µ —Ä–∞–≤–Ω–æ `1` –∏ –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–ª–æ—Å—å:
       - –†–∞–∑–±–∏–≤–∞–µ–º `n` –Ω–∞ —Ü–∏—Ñ—Ä—ã, –≤–æ–∑–≤–æ–¥–∏–º –∏—Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç –∏ —Å—É–º–º–∏—Ä—É–µ–º.
       - –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –±—ã–ª –≤ `used_set`, –∑–Ω–∞—á–∏—Ç, —Ü–∏–∫–ª ‚Üí `False`.
       - –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ `used_set` –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.
    3Ô∏è‚É£ –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ `1`, —á–∏—Å–ª–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ ‚Üí `True`.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(log n)`, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–∏—Ñ—Ä –≤ `n`.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(log n)`, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º `set()` —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ.

    :param n: int - –ß–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    :return: bool - `True`, –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ, –∏–Ω–∞—á–µ `False`.
    """
    used_set = set()

    while n != 1 and n not in used_set:
        used_set.add(n)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ü–∏–∫–ª
        n = sum(int(digit) ** 2 for digit in str(n))  # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ü–∏—Ñ—Ä

    return n == 1  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ 1, —á–∏—Å–ª–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ


# üîπ –¢–µ—Å—Ç—ã
print(happy_numbers(19))  # ‚úÖ True (19 ‚Üí 82 ‚Üí 68 ‚Üí 100 ‚Üí 1)
print(happy_numbers(2))   # ‚úÖ False (2 ‚Üí 4 ‚Üí 16 ‚Üí 37 ‚Üí 58 ‚Üí 89 ‚Üí 145 ‚Üí 42 ‚Üí 20 ‚Üí 4 (—Ü–∏–∫–ª))
print(happy_numbers(7))   # ‚úÖ True (7 ‚Üí 49 ‚Üí 97 ‚Üí 130 ‚Üí 10 ‚Üí 1)
print(happy_numbers(1))   # ‚úÖ True (1 ‚Äî —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ)
