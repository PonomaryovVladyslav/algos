from collections import Counter

def can_construct(ransom_note: str, magazine: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å `ransom_note` –∏–∑ –±—É–∫–≤ –≤ `magazine`.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (O(n + m))**:
       1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º `Counter` (—Å–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç–æ—Ç) –¥–ª—è `ransom_note` –∏ `magazine`.
       2Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ `ransom_note`, –ø—Ä–æ–≤–µ—Ä—è—è, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –≤ `magazine`.
       3Ô∏è‚É£ –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –±—É–∫–≤—ã –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `False`, –∏–Ω–∞—á–µ `True`.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n + m)`, –≥–¥–µ `n` ‚Äî –¥–ª–∏–Ω–∞ `ransom_note`, `m` ‚Äî –¥–ª–∏–Ω–∞ `magazine`.
       - `Counter` —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ `O(n)`, –∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ `O(n)`.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(1)`, —Ç–∞–∫ –∫–∞–∫ –≤ `Counter` –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 26 –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.

    :param ransom_note: str - –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å.
    :param magazine: str - –°—Ç—Ä–æ–∫–∞ —Å –±—É–∫–≤–∞–º–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å.
    :return: bool - `True`, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ `False`.
    """
    ransom_count = Counter(ransom_note)
    magazine_count = Counter(magazine)

    for char, count in ransom_count.items():
        if magazine_count[char] < count:
            return False  # –ï—Å–ª–∏ –±—É–∫–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å False

    return True  # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Å–µ—Ö –±—É–∫–≤, –≤–µ—Ä–Ω—É—Ç—å True


# üîπ –¢–µ—Å—Ç—ã
print(can_construct("a", "b"))  # ‚úÖ False
print(can_construct("aa", "ab"))  # ‚úÖ False
print(can_construct("aa", "aab"))  # ‚úÖ True
print(can_construct("hello", "hlellohe"))  # ‚úÖ True
print(can_construct("abc", "acbd"))  # ‚úÖ True
