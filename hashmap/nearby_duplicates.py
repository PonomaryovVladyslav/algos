def contains_nearby_duplicate(nums: list[int], k: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞,
    —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ –±–æ–ª–µ–µ k.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (O(n))**:
       1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º `index_map` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è **–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞** –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞.
       2Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ `nums`, –ø—Ä–æ–≤–µ—Ä—è—è, –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ —á–∏—Å–ª–æ —Ä–∞–Ω–µ–µ.
       3Ô∏è‚É£ –ï—Å–ª–∏ `abs(i - j) <= k`, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `True`.
       4Ô∏è‚É£ –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ `index_map`.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ **–æ–¥–∏–Ω —Ä–∞–∑**.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ `index_map` —Å–æ–¥–µ—Ä–∂–∏—Ç **–≤—Å–µ —á–∏—Å–ª–∞ –º–∞—Å—Å–∏–≤–∞**.

    :param nums: list[int] - –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
    :param k: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
    :return: bool - `True`, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, –∏–Ω–∞—á–µ `False`.
    """
    index_map = {}

    for i, num in enumerate(nums):
        if num in index_map and abs(i - index_map[num]) <= k:
            return True  # –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å |i - j| ‚â§ k

        index_map[num] = i  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è num

    return False


# üîπ –¢–µ—Å—Ç—ã
print(contains_nearby_duplicate([1,2,3,1], 3))  # ‚úÖ True
print(contains_nearby_duplicate([1,0,1,1], 1))  # ‚úÖ True
print(contains_nearby_duplicate([1,2,3,1,2,3], 2))  # ‚úÖ False
print(contains_nearby_duplicate([99, 99], 2))  # ‚úÖ True
print(contains_nearby_duplicate([], 1))  # ‚úÖ False
