def unique_paths_with_obstacles(grid: list[list[int]]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π** –æ—Ç `grid[0][0]` –¥–æ `grid[m-1][n-1]`,
    –¥–≤–∏–≥–∞—è—Å—å —Ç–æ–ª—å–∫–æ **–≤–Ω–∏–∑** –∏–ª–∏ **–≤–ø—Ä–∞–≤–æ**, —Å —É—á—ë—Ç–æ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π (`1`).

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ O(m * n)):
    1Ô∏è‚É£ –ï—Å–ª–∏ `grid[0][0] == 1` –∏–ª–∏ `grid[m-1][n-1] == 1`, –ø—É—Ç–∏ –Ω–µ—Ç ‚Üí `return 0`
    2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º `dp[i][j]`, –≥–¥–µ `dp[i][j]` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –¥–æ `grid[i][j]`.
    3Ô∏è‚É£ `dp[0][0] = 1` (–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞).
    4Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π).
    5Ô∏è‚É£ –î–ª—è –≤—Å–µ—Ö `grid[i][j] == 0`:
       `dp[i][j] = dp[i-1][j] + dp[i][j-1]`
    6Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: `dp[m-1][n-1]`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî –¥–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî `dp` —Ç–∞–±–ª–∏—Ü–∞.

    :param grid: list[list[int]] - `m x n` –º–∞—Ç—Ä–∏—Ü–∞ (0 ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ, 1 ‚Äî –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ).
    :return: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π.
    """

    m, n = len(grid), len(grid[0])

    # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –Ω–µ—Ç –ø—É—Ç–∏
    if grid[0][0] == 1 or grid[m - 1][n - 1] == 1:
        return 0

    dp = [[0] * n for _ in range(m)]
    dp[0][0] = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    for i in range(1, m):
        if grid[i][0] == 0:
            dp[i][0] = dp[i - 1][0]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    for j in range(1, n):
        if grid[0][j] == 0:
            dp[0][j] = dp[0][j - 1]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –º–∞—Ç—Ä–∏—Ü—É
    for i in range(1, m):
        for j in range(1, n):
            if grid[i][j] == 0:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]

    return dp[m - 1][n - 1]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –¥–æ —Ñ–∏–Ω–∏—à–∞


def unique_paths_with_obstacles_optimized(grid: list[list[int]]) -> int:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º **–æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ `dp` (O(n) –ø–∞–º—è—Ç–∏)**.

    üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
    - –í–º–µ—Å—Ç–æ `dp[m][n]`, –∏—Å–ø–æ–ª—å–∑—É–µ–º `dp[n]`, –æ–±–Ω–æ–≤–ª—è—è –∑–Ω–∞—á–µ–Ω–∏—è **—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ**.
    - `dp[j]` —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –¥–æ `grid[i][j]`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** (–¥–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** (–æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ `dp`).

    :param grid: list[list[int]] - `m x n` –º–∞—Ç—Ä–∏—Ü–∞ (0 ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ, 1 ‚Äî –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ).
    :return: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π.
    """

    m, n = len(grid), len(grid[0])

    if grid[0][0] == 1 or grid[m - 1][n - 1] == 1:
        return 0

    dp = [0] * n
    dp[0] = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞

    for i in range(m):
        for j in range(n):
            if grid[i][j] == 1:
                dp[j] = 0  # –ï—Å–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ, –æ–±–Ω—É–ª—è–µ–º –ø—É—Ç—å
            elif j > 0:
                dp[j] += dp[j - 1]  # dp[j] = dp[j] (—Å–≤–µ—Ä—Ö—É) + dp[j-1] (—Å–ª–µ–≤–∞)

    return dp[-1]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –¥–æ (m-1, n-1)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(unique_paths_with_obstacles([
  [0, 0, 0],
  [0, 1, 0],
  [0, 0, 0]
]))  # ‚úÖ 2

print(unique_paths_with_obstacles([
  [0, 1],
  [0, 0]
]))  # ‚úÖ 1

print(unique_paths_with_obstacles([
  [1, 0]
]))  # ‚úÖ 0

print(unique_paths_with_obstacles_optimized([
  [0, 0, 0],
  [0, 1, 0],
  [0, 0, 0]
]))  # ‚úÖ 2

print(unique_paths_with_obstacles_optimized([
  [0, 1],
  [0, 0]
]))  # ‚úÖ 1

print(unique_paths_with_obstacles_optimized([
  [1, 0]
]))  # ‚úÖ 0
