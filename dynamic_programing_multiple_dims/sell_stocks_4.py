def max_profit(k: int, prices: list[int]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç **–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å** –æ—Ç **–Ω–µ –±–æ–ª–µ–µ —á–µ–º k —Å–¥–µ–ª–æ–∫** (–ø–æ–∫—É–ø–∫–∞-–ø—Ä–æ–¥–∞–∂–∞).

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ O(k * n)):
    1Ô∏è‚É£ –ï—Å–ª–∏ `k == 0` –∏–ª–∏ `prices` –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `0`.
    2Ô∏è‚É£ –ï—Å–ª–∏ `k >= n/2`, —ç—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ **–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Å–¥–µ–ª–∫–∞–º** ‚Üí `O(n) —Ä–µ—à–µ–Ω–∏–µ`.
    3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º `dp[t][d]`, –≥–¥–µ:
       - `t` ‚Äî –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (1 ‚â§ t ‚â§ k),
       - `d` ‚Äî –¥–µ–Ω—å (0 ‚â§ d < n),
       - `dp[t][d]` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ `t` —Å–¥–µ–ª–æ–∫ –∫ `d`-–º—É –¥–Ω—é.
    4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º `dp[t][d]`:
       - `max_prev_buy = max(max_prev_buy, dp[t-1][d-1] - prices[d-1])`
       - `dp[t][d] = max(dp[t][d-1], prices[d] + max_prev_buy)`.
    5Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: `dp[k][n-1]`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(k * n)** ‚Äî –¥–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(k * n)** ‚Äî `dp` —Ç–∞–±–ª–∏—Ü–∞.

    :param k: int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫.
    :param prices: list[int] - –º–∞—Å—Å–∏–≤ —Ü–µ–Ω.
    :return: int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç `k` —Å–¥–µ–ª–æ–∫.
    """

    if not prices or k == 0:
        return 0

    n = len(prices)

    # –ï—Å–ª–∏ k >= n/2, —ç—Ç–æ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å–¥–µ–ª–∫–∞–º
    if k >= n // 2:
        return sum(max(prices[i+1] - prices[i], 0) for i in range(n - 1))

    dp = [[0] * n for _ in range(k + 1)]

    for t in range(1, k + 1):
        max_prev_buy = float('-inf')
        for d in range(1, n):
            max_prev_buy = max(max_prev_buy, dp[t-1][d-1] - prices[d-1])
            dp[t][d] = max(dp[t][d-1], prices[d] + max_prev_buy)

    return dp[k][n-1]


def max_profit_optimized(k: int, prices: list[int]) -> int:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: **O(n) –ø–∞–º—è—Ç–∏**.

    üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
    - –í–º–µ—Å—Ç–æ `dp[k][n]`, –∏—Å–ø–æ–ª—å–∑—É–µ–º `dp_prev[n]` –∏ `dp_curr[n]`, –æ–±–Ω–æ–≤–ª—è—è –∏—Ö **—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ**.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(k * n)** (–¥–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** (–¥–≤–µ —Å—Ç—Ä–æ–∫–∏ `dp`).

    :param k: int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫.
    :param prices: list[int] - –º–∞—Å—Å–∏–≤ —Ü–µ–Ω.
    :return: int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç `k` —Å–¥–µ–ª–æ–∫.
    """

    if not prices or k == 0:
        return 0

    n = len(prices)

    if k >= n // 2:
        return sum(max(prices[i+1] - prices[i], 0) for i in range(n - 1))

    dp_prev = [0] * n
    dp_curr = [0] * n

    for t in range(1, k + 1):
        max_prev_buy = float('-inf')
        for d in range(1, n):
            max_prev_buy = max(max_prev_buy, dp_prev[d-1] - prices[d-1])
            dp_curr[d] = max(dp_curr[d-1], prices[d] + max_prev_buy)
        dp_prev, dp_curr = dp_curr, dp_prev  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏

    return dp_prev[n-1]


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(max_profit(2, [3, 2, 6, 5, 0, 3]))  # ‚úÖ 7
print(max_profit(2, [1, 2, 4, 2, 5, 7, 2, 4, 9, 0]))  # ‚úÖ 13
print(max_profit(3, [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]))  # ‚úÖ 16
print(max_profit(2, [3, 3, 5, 0, 0, 3, 1, 4]))  # ‚úÖ 6

print(max_profit_optimized(2, [3, 2, 6, 5, 0, 3]))  # ‚úÖ 7
print(max_profit_optimized(2, [1, 2, 4, 2, 5, 7, 2, 4, 9, 0]))  # ‚úÖ 13
print(max_profit_optimized(3, [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]))  # ‚úÖ 16
print(max_profit_optimized(2, [3, 3, 5, 0, 0, 3, 1, 4]))  # ‚úÖ 6
