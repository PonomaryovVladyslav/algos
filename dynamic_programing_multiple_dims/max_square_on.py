def maximal_square_optimized(matrix: list[list[int]]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç **—Ä–∞–∑–º–µ—Ä –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞** —Å `1` –≤ –º–∞—Ç—Ä–∏—Ü–µ `matrix`
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ DP O(m * n) —Å O(n) –ø–∞–º—è—Ç–∏):
    1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º **–æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É `prev`** –≤–º–µ—Å—Ç–æ `dp[m][n]`, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –ø–∞–º—è—Ç—å —Å O(m * n) –¥–æ O(n).
    2Ô∏è‚É£ `prev[j]` —Ö—Ä–∞–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, `curr[j]` ‚Äî —Ç–µ–∫—É—â–µ–π.
    3Ô∏è‚É£ –ï—Å–ª–∏ `matrix[i][j] == 1`, –æ–±–Ω–æ–≤–ª—è–µ–º `curr[j]`:
        - `curr[j] = min(prev[j], curr[j-1], prev[j-1]) + 1`
    4Ô∏è‚É£ `max_side` –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –∫–≤–∞–¥—Ä–∞—Ç–∞.
    5Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: `max_side ** 2`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî –¥–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º `prev` –∏ `curr`.

    :param matrix: list[list[int]] - –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ `m x n` (0 –∏ 1).
    :return: int - –ø–ª–æ—â–∞–¥—å –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.
    """

    if not matrix:
        return 0

    m, n = len(matrix), len(matrix[0])
    prev = [0] * (n + 1)  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    max_side = 0

    # –ó–∞–ø–æ–ª–Ω—è–µ–º DP —Å—Ç—Ä–æ–∫—É
    for i in range(m):
        curr = [0] * (n + 1)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
        for j in range(1, n + 1):
            if matrix[i][j - 1] == 1:
                curr[j] = min(prev[j], curr[j - 1], prev[j - 1]) + 1
                max_side = max(max_side, curr[j])
        prev = curr  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É

    return max_side ** 2


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
matrix = [
    [1, 0, 1, 0, 0],
    [1, 0, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 0, 0, 1, 1]
]

print(maximal_square_optimized(matrix))  # ‚úÖ 4

matrix2 = [
    [0, 1],
    [1, 0]
]

print(maximal_square_optimized(matrix2))  # ‚úÖ 1

matrix3 = [
    [1, 1, 1],
    [1, 1, 1],
    [1, 1, 1]
]

print(maximal_square_optimized(matrix3))  # ‚úÖ 9
