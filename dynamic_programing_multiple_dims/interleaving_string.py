def is_interleave(s1: str, s2: str, s3: str) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å `s3`, —á–µ—Ä–µ–¥—É—è —Å–∏–º–≤–æ–ª—ã `s1` –∏ `s2`, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ O(m * n)):
    1Ô∏è‚É£ –ï—Å–ª–∏ `len(s1) + len(s2) != len(s3)`, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `False` (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å `s3`).
    2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º `dp[i][j]`, –≥–¥–µ `dp[i][j] = True`, –µ—Å–ª–∏ `s3[:i+j]` –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ `s1[:i]` –∏ `s2[:j]`.
    3Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: `dp[0][0] = True`, —Ç–∞–∫ –∫–∞–∫ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—é—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    4Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º `dp` –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
        - `dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]` (–µ—Å–ª–∏ `s3` —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ `s1`).
        - `dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]` (–µ—Å–ª–∏ `s3` —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ `s2`).
        - `dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])`
    5Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: `dp[m][n]`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî –¥–≤—É–º–µ—Ä–Ω–∞—è `dp` —Ç–∞–±–ª–∏—Ü–∞.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º `dp[m+1][n+1]`.

    :param s1: str - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
    :param s2: str - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.
    :param s3: str - —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞.
    :return: bool - –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å `s3` –∏–∑ `s1` –∏ `s2`, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.
    """

    m, n = len(s1), len(s2)

    # –ï—Å–ª–∏ –¥–ª–∏–Ω—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Å—Ä–∞–∑—É False
    if m + n != len(s3):
        return False

    # –°–æ–∑–¥–∞—ë–º DP —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º (m+1) x (n+1)
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–∑—É–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (—Ç–æ–ª—å–∫–æ s1)
    for i in range(1, m + 1):
        dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (—Ç–æ–ª—å–∫–æ s2)
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Ç–∞–±–ª–∏—Ü—É
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \
                       (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])

    return dp[m][n]


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(is_interleave("abc", "def", "adbcef"))  # ‚úÖ True
print(is_interleave("abc", "def", "abdecf"))  # ‚ùå False
print(is_interleave("aab", "axy", "aaxaby"))  # ‚úÖ True
print(is_interleave("abc", "xyz", "axycbz"))  # ‚ùå False
