def knapsack(items: dict[str, tuple[int, int]], max_weight: int) -> tuple[int, list[str]]:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É **0/1 —Ä—é–∫–∑–∞–∫–∞**: –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤,
    –ø–æ–º–µ—â—ë–Ω–Ω—ã—Ö –≤ —Ä—é–∫–∑–∞–∫, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ O(n * W)):
    1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º `dp[i][j]`, –≥–¥–µ `dp[i][j]` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ `i` –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –≤–µ—Å–µ `j`.
    2Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: `dp[0][j] = 0` (–±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å `0`).
    3Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:
        - –ï—Å–ª–∏ `j < item_weight`, –ø–µ—Ä–µ–Ω–æ—Å–∏–º `dp[i-1][j]`.
        - –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º –∏–∑:
          - `dp[i-1][j]` (–Ω–µ –±–µ—Ä—ë–º –ø—Ä–µ–¥–º–µ—Ç).
          - `dp[i-1][j-item_weight] + item_value` (–±–µ—Ä—ë–º –ø—Ä–µ–¥–º–µ—Ç).
    4Ô∏è‚É£ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∑—è—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n * W)**, –≥–¥–µ `n` ‚Äî —á–∏—Å–ª–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, `W` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n * W)** ‚Äî `dp` —Ç–∞–±–ª–∏—Ü–∞.

    :param items: dict[str, tuple[int, int]] - —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ: (–≤–µ—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å)}.
    :param max_weight: int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Ä—é–∫–∑–∞–∫–∞.
    :return: tuple[int, list[str]] - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    """

    item_list = list(items.keys())  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    n = len(item_list)

    # –°–æ–∑–¥–∞—ë–º DP —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º (n+1) x (max_weight+1)
    dp = [[0 for _ in range(max_weight + 1)] for _ in range(n + 1)]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º DP —Ç–∞–±–ª–∏—Ü—É
    for i in range(1, n + 1):
        item_name = item_list[i - 1]
        item_weight, item_value = items[item_name]

        for j in range(1, max_weight + 1):
            if j < item_weight:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - item_weight] + item_value)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    total_value = dp[n][max_weight]
    items_taken = []
    i, j = n, max_weight

    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:  # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –≤–∑—è—Ç
            items_taken.append(item_list[i - 1])
            j -= items[item_list[i - 1]][0]  # –í—ã—á–∏—Ç–∞–µ–º –≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞
        i -= 1

    return total_value, items_taken


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
items = {
    "apple": (2, 100),
    "ring": (1, 10),
    "sword": (3, 40),
    "shield": (5, 30),
    "potion": (3, 20),
}

max_weight = 9
value, selected_items = knapsack(items, max_weight)

print(f"Items taken: {selected_items}\nTotal value: {value}")
