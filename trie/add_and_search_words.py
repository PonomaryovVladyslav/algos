class TrieNode:
    def __init__(self):
        self.children = {}  # O(1) –ø–∞–º—è—Ç—å –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Ç–æ–º–∫–æ–≤
        self.is_end = False  # –§–ª–∞–≥ –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞


class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def add_word(self, word: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ Trie.
        –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m)
        –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n * m) (–≥–¥–µ n ‚Äî –∫–æ–ª-–≤–æ —Å–ª–æ–≤, m ‚Äî —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞)
        """
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()  # O(1) –≤—Å—Ç–∞–≤–∫–∞ –≤ HashMap
            node = node.children[char]  # O(1) –¥–æ—Å—Ç—É–ø
        node.is_end = True

    def search(self, word: str) -> bool:
        """–ò—â–µ—Ç —Å–ª–æ–≤–æ –≤ Trie —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è '.'
        –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(26^m) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, O(m) –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ
        –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m) (–≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞ –≤ —Ä–µ–∫—É—Ä—Å–∏–∏)
        """
        return self._dfs(word, 0, self.root)

    def _dfs(self, word: str, index: int, node: TrieNode) -> bool:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π DFS-–ø–æ–∏—Å–∫ –ø–æ Trie."""
        if index == len(word):
            return node.is_end

        char = word[index]

        if char == ".":  # Wildcard (–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏)
            for child in node.children.values():  # O(26) –º–∞–∫—Å–∏–º—É–º
                if self._dfs(word, index + 1, child):
                    return True
        elif char in node.children:  # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –±—É–∫–≤—ã O(1)
            return self._dfs(word, index + 1, node.children[char])

        return False


# üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
wd = WordDictionary()
wd.add_word("bad")
wd.add_word("dad")
wd.add_word("mad")

print(wd.search("pad"))  # ‚ùå False
print(wd.search("bad"))  # ‚úÖ True
print(wd.search(".ad"))  # ‚úÖ True (".ad" —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å "bad", "dad", "mad")
print(wd.search("b.."))  # ‚úÖ True ("b.." —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å "bad")
