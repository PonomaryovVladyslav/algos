from collections import deque

# –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç–∞ —Å —Å—É–º–º–æ–π `targetSum`.
# –î–∞–Ω–æ: –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∫–æ—Ä–Ω–µ–º `root` –∏ —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ `targetSum`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `True`, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –∫ –ª–∏—Å—Ç—É, —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω–∞ `targetSum`.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def has_path_sum(root: TreeNode, target_sum: int) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç–∞ —Å —Å—É–º–º–æ–π `target_sum` (DFS, —Ä–µ–∫—É—Ä—Å–∏—è).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :param target_sum: int - —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –ø—É—Ç–∏.
    :return: bool - `True`, –µ—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ `False`.
    """

    if not root:
        return False

    # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª –∏ —Å—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if not root.left and not root.right:
        return root.val == target_sum

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
    return has_path_sum(root.left, target_sum - root.val) or has_path_sum(root.right, target_sum - root.val)


# üîπ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ:
#     5
#    / \
#   4   8
#  /   / \
# 11  13  4
# /  \      \
#7    2      1
tree = TreeNode(5,
    TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))),
    TreeNode(8, TreeNode(13), TreeNode(4, None, TreeNode(1)))
)

print(has_path_sum(tree, 22))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True (–ø—É—Ç—å 5->4->11->2)
print(has_path_sum(tree, 26))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True (–ø—É—Ç—å 5->8->13)
print(has_path_sum(tree, 27))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False


def has_path_sum_bfs(root: TreeNode, target_sum: int) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –ª–∏—Å—Ç–∞ —Å —Å—É–º–º–æ–π `target_sum` (BFS, –æ—á–µ—Ä–µ–¥—å).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :param target_sum: int - —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –ø—É—Ç–∏.
    :return: bool - `True`, –µ—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ `False`.
    """

    if not root:
        return False

    queue: deque[tuple[TreeNode, int]] = deque([(root, target_sum)])

    while queue:
        node, curr_sum = queue.popleft()

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ª–∏—Å—Ç–∞ –∏ —Å—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if not node.left and not node.right and node.val == curr_sum:
            return True

        if node.left:
            queue.append((node.left, curr_sum - node.val))
        if node.right:
            queue.append((node.right, curr_sum - node.val))

    return False


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º BFS-–º–µ—Ç–æ–¥
print(has_path_sum_bfs(tree, 22))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(has_path_sum_bfs(tree, 26))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(has_path_sum_bfs(tree, 27))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
1. **DFS (—Ä–µ–∫—É—Ä—Å–∏—è):**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), –≥–¥–µ `H` - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).

2. **BFS (–æ—á–µ—Ä–µ–¥—å):**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –æ–±—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m), –≥–¥–µ `m` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (—à–∏—Ä–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞).

üîπ **DFS –ø—Ä–æ—â–µ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–µ–Ω**, –∞ **BFS –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–µ–Ω –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è**.
"""
