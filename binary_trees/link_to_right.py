from collections import deque

# –ó–∞–¥–∞—á–∞: –°–≤—è–∑–∞—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ.
# –î–∞–Ω–æ: –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –≥–¥–µ –∫–∞–∂–¥—ã–π —É–∑–µ–ª –∏–º–µ–µ—Ç `next` (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ—Å–µ–¥–∞ —Å–ø—Ä–∞–≤–∞).
# –ù—É–∂–Ω–æ: –∑–∞–ø–æ–ª–Ω–∏—Ç—å `next` –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å O(1) –¥–æ–ø. –ø–∞–º—è—Ç–∏).

class Node:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å —É–∫–∞–∑–∞—Ç–µ–ª–µ–º `next`.
    """
    def __init__(self, val: int = 0, left: "Node" = None, right: "Node" = None, next: "Node" = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next


def connect(root: Node) -> Node:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É–∑–ª—ã –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —á–µ—Ä–µ–∑ `next` (BFS, –æ—á–µ—Ä–µ–¥—å).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (—à–∏—Ä–æ–∫–æ–µ –¥–µ—Ä–µ–≤–æ) –æ—á–µ—Ä–µ–¥—å —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —É–∑–ª—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ.

    :param root: Node - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: Node - –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ `next`.
    """

    if not root:
        return None

    queue: deque[Node] = deque([root])

    while queue:
        prev: Node | None = None
        for _ in range(len(queue)):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–ª—ã —É—Ä–æ–≤–Ω—è
            node: Node = queue.popleft()

            if prev:
                prev.next = node  # –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã
            prev = node

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

        node.next = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ NULL

    return root


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–º–µ—Ç–æ–¥ BFS)
tree = Node(1, Node(2, Node(4), Node(5)), Node(3, Node(6), Node(7)))
connected_tree = connect(tree)


def connect_optimized(root: Node) -> Node:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É–∑–ª—ã –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —á–µ—Ä–µ–∑ `next` (O(1) –ø–∞–º—è—Ç–∏, –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –æ–±—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π.

    :param root: Node - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: Node - –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ `next`.
    """

    if not root:
        return None

    leftmost: Node | None = root  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è

    while leftmost:  # –ü–æ–∫–∞ –µ—Å—Ç—å —É–∑–ª—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
        dummy: Node = Node(0)
        prev: Node = dummy
        current: Node | None = leftmost

        while current:  # –û–±—Ö–æ–¥ —É–∑–ª–æ–≤ —É—Ä–æ–≤–Ω—è
            if current.left:
                prev.next = current.left
                prev = prev.next
            if current.right:
                prev.next = current.right
                prev = prev.next

            current = current.next  # –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ —É—Ä–æ–≤–Ω—é

        leftmost = dummy.next  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å

    return root


"""
üîπ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–µ—Ç–æ–¥–æ–≤:

1Ô∏è‚É£ `connect()` (BFS —Å –æ—á–µ—Ä–µ–¥—å—é)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ —Ö—Ä–∞–Ω–∏–º –≤–µ—Å—å —É—Ä–æ–≤–µ–Ω—å –≤ `queue`.

2Ô∏è‚É£ `connect_optimized()` (–±–µ–∑ –¥–æ–ø. –ø–∞–º—è—Ç–∏)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.

‚úÖ –í—ã–≤–æ–¥:
   - `connect_optimized()` –ª—É—á—à–µ –¥–ª—è **–±–æ–ª—å—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤**, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **O(1) –ø–∞–º—è—Ç–∏**.
   - `connect()` –ø—Ä–æ—â–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–µ–µ.
"""
