from collections import deque


# –ó–∞–¥–∞—á–∞: –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ).
# –î–∞–Ω–æ: –∫–æ—Ä–µ–Ω—å `root` –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """

    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def invert_tree(root: TreeNode) -> TreeNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (DFS, —Ä–µ–∫—É—Ä—Å–∏—è).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), –≥–¥–µ `H` ‚Äî –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: TreeNode | None - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ.
    """

    if not root:
        return None  # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ

    root.left, root.right = root.right, root.left  # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏

    invert_tree(root.left)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
    invert_tree(root.right)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ

    return root


def invert_tree_bfs(root: TreeNode) -> TreeNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (BFS, –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –≤ `queue` –æ–∫–∞–∂–µ—Ç—Å—è –≤–µ—Å—å —É—Ä–æ–≤–µ–Ω—å.

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: TreeNode | None - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ.
    """

    if not root:
        return None

    queue: deque[TreeNode] = deque([root])

    while queue:
        node: TreeNode = queue.popleft()
        node.left, node.right = node.right, node.left  # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏

        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

    return root


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
tree = TreeNode(4,
                TreeNode(2, TreeNode(1), TreeNode(3)),
                TreeNode(7, TreeNode(6), TreeNode(9))
                )

# –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é DFS
inverted_tree_dfs = invert_tree(tree)

# –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é BFS (–Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ)
tree = TreeNode(4,
                TreeNode(2, TreeNode(1), TreeNode(3)),
                TreeNode(7, TreeNode(6), TreeNode(9))
                )
inverted_tree_bfs = invert_tree_bfs(tree)

"""
üîπ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:

1Ô∏è‚É£ `invert_tree()` (DFS, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H) ‚Äî –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (H = log n –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ, H = n –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ).

2Ô∏è‚É£ `invert_tree_bfs()` (BFS, –æ—á–µ—Ä–µ–¥—å)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ —Ö—Ä–∞–Ω–∏–º –≤–µ—Å—å —É—Ä–æ–≤–µ–Ω—å –≤ `queue`.

‚úÖ –í—ã–≤–æ–¥:
   - **DFS –ø—Ä–æ—â–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(H) –ø–∞–º—è—Ç–∏** (–ª—É—á—à–µ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤).
   - **BFS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(n) –ø–∞–º—è—Ç–∏** (–ª—É—á—à–µ –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤).
"""
