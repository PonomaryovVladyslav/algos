from collections import deque


# –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏.
# –î–∞–Ω–æ: –¥–≤–∞ –∫–æ—Ä–Ω—è `p` –∏ `q` –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `True`, –µ—Å–ª–∏ –æ–Ω–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º —É–∑–ª–æ–≤.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def is_same_tree(p: TreeNode, q: TreeNode) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏ (DFS, —Ä–µ–∫—É—Ä—Å–∏—è).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), –≥–¥–µ `H` ‚Äî –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).

    :param p: TreeNode - –∫–æ—Ä–µ–Ω—å –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :param q: TreeNode - –∫–æ—Ä–µ–Ω—å –≤—Ç–æ—Ä–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: bool - `True`, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤—å—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, –∏–Ω–∞—á–µ `False`.
    """

    if not p and not q:
        return True  # –û–±–∞ –¥–µ—Ä–µ–≤–∞ –ø—É—Å—Ç—ã–µ
    if not p or not q or p.val != q.val:
        return False  # –õ–∏–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–Ω–∞—è, –ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç

    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


def is_same_tree_bfs(p: TreeNode, q: TreeNode) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏ (BFS, –æ—á–µ—Ä–µ–¥—å).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ `queue` —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —É–∑–ª—ã —É—Ä–æ–≤–Ω—è.

    :param p: TreeNode - –∫–æ—Ä–µ–Ω—å –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :param q: TreeNode - –∫–æ—Ä–µ–Ω—å –≤—Ç–æ—Ä–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: bool - `True`, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤—å—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, –∏–Ω–∞—á–µ `False`.
    """

    queue: deque[tuple[TreeNode | None, TreeNode | None]] = deque([(p, q)])

    while queue:
        node_p, node_q = queue.popleft()

        if not node_p and not node_q:
            continue  # –û–±–∞ –ø—É—Å—Ç—ã–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not node_p or not node_q or node_p.val != node_q.val:
            return False  # –õ–∏–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–Ω–∞—è, –ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç

        queue.append((node_p.left, node_q.left))
        queue.append((node_p.right, node_q.right))

    return True


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
tree1 = TreeNode(1, TreeNode(2), TreeNode(3))
tree2 = TreeNode(1, TreeNode(2), TreeNode(3))
tree3 = TreeNode(1, TreeNode(2))
tree4 = TreeNode(1, None, TreeNode(2))

print(is_same_tree(tree1, tree2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(is_same_tree(tree1, tree3))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False
print(is_same_tree(tree3, tree4))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False

print(is_same_tree_bfs(tree1, tree2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(is_same_tree_bfs(tree1, tree3))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False
print(is_same_tree_bfs(tree3, tree4))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False


"""
üîπ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:

1Ô∏è‚É£ `is_same_tree()` (DFS, —Ä–µ–∫—É—Ä—Å–∏—è)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H) ‚Äî –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (H = log n –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ, H = n –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ).

2Ô∏è‚É£ `is_same_tree_bfs()` (BFS, –æ—á–µ—Ä–µ–¥—å)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ `queue` —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —É–∑–ª—ã —É—Ä–æ–≤–Ω—è.

‚úÖ –í—ã–≤–æ–¥:
   - **DFS –ø—Ä–æ—â–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(H) –ø–∞–º—è—Ç–∏** (–ª—É—á—à–µ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤).
   - **BFS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(n) –ø–∞–º—è—Ç–∏** (–ª—É—á—à–µ –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤, —Ç–∞–∫ –∫–∞–∫ –∏–∑–±–µ–≥–∞–µ—Ç –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏).
"""
