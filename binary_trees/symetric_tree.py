from collections import deque


# –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º.
# –î–∞–Ω–æ: –∫–æ—Ä–µ–Ω—å `root` –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `True`, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ, –∏–Ω–∞—á–µ `False`.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def is_symmetric(root: TreeNode) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º (DFS, —Ä–µ–∫—É—Ä—Å–∏—è).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), –≥–¥–µ `H` ‚Äî –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: bool - `True`, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ, –∏–Ω–∞—á–µ `False`.
    """

    if not root:
        return True

    def is_mirror(left: TreeNode | None, right: TreeNode | None) -> bool:
        if not left and not right:
            return True
        if not left or not right or left.val != right.val:
            return False
        return is_mirror(left.left, right.right) and is_mirror(left.right, right.left)

    return is_mirror(root.left, root.right)


def is_symmetric_bfs(root: TreeNode) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º (BFS, –æ—á–µ—Ä–µ–¥—å).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ `queue` —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —É–∑–ª—ã —É—Ä–æ–≤–Ω—è.

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: bool - `True`, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ, –∏–Ω–∞—á–µ `False`.
    """

    if not root:
        return True

    queue: deque[tuple[TreeNode | None, TreeNode | None]] = deque([(root.left, root.right)])

    while queue:
        left, right = queue.popleft()

        if not left and not right:
            continue
        if not left or not right or left.val != right.val:
            return False

        queue.append((left.left, right.right))
        queue.append((left.right, right.left))

    return True


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
tree1 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(2, TreeNode(4), TreeNode(3)))
tree2 = TreeNode(1, TreeNode(2, None, TreeNode(3)), TreeNode(2, None, TreeNode(3)))

print(is_symmetric(tree1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(is_symmetric(tree2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False

print(is_symmetric_bfs(tree1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(is_symmetric_bfs(tree2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False


"""
üîπ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:

1Ô∏è‚É£ `is_symmetric()` (DFS, —Ä–µ–∫—É—Ä—Å–∏—è)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H) ‚Äî –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (H = log n –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ, H = n –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ).

2Ô∏è‚É£ `is_symmetric_bfs()` (BFS, –æ—á–µ—Ä–µ–¥—å)
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ `queue` —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —É–∑–ª—ã —É—Ä–æ–≤–Ω—è.

‚úÖ –í—ã–≤–æ–¥:
   - **DFS –ø—Ä–æ—â–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(H) –ø–∞–º—è—Ç–∏** (–ª—É—á—à–µ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤).
   - **BFS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(n) –ø–∞–º—è—Ç–∏** (–ª—É—á—à–µ –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤, –∏–∑–±–µ–≥–∞–µ—Ç –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏).
"""
