# –ó–∞–¥–∞—á–∞: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ `inorder` (LNR) –∏ `postorder` (LRN) –æ–±—Ö–æ–¥–∞–º.
# –î–∞–Ω–æ: –¥–≤–∞ —Å–ø–∏—Å–∫–∞ `inorder` –∏ `postorder`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–æ–≤.
# –ù—É–∂–Ω–æ: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫–æ—Ä–µ–Ω—å.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def build_tree(inorder: list[int], postorder: list[int]) -> TreeNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ `inorder` –∏ `postorder` –æ–±—Ö–æ–¥–∞–º.

    :param inorder: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ `inorder` –æ–±—Ö–æ–¥–∞.
    :param postorder: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ `postorder` –æ–±—Ö–æ–¥–∞.
    :return: TreeNode | None - –∫–æ—Ä–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """

    if not inorder or not postorder:
        return None

    inorder_index: dict[int, int] = {val: idx for idx, val in enumerate(inorder)}  # O(n) —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞
    post_idx: int = len(postorder) - 1  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ `postorder`

    def helper(left: int, right: int) -> TreeNode | None:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–µ–≤–∞.

        :param left: int - –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ `inorder`.
        :param right: int - –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ `inorder`.
        :return: TreeNode | None - –∫–æ—Ä–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞.
        """
        nonlocal post_idx
        if left > right:
            return None

        root_val: int = postorder[post_idx]  # –ë–µ—Ä—ë–º –∫–æ—Ä–µ–Ω—å –∏–∑ `postorder`
        root: TreeNode = TreeNode(root_val)
        post_idx -= 1  # –î–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å

        mid: int = inorder_index[root_val]  # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤ `inorder`
        root.right = helper(mid + 1, right)  # –°–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ!
        root.left = helper(left, mid - 1)  # –ó–∞—Ç–µ–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ

        return root

    return helper(0, len(inorder) - 1)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
inorder: list[int] = [9, 3, 15, 20, 7]
postorder: list[int] = [9, 15, 7, 20, 3]

root: TreeNode = build_tree(inorder, postorder)

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º `O(1)` –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —á–µ—Ä–µ–∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–µ–º —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É `inorder_index` –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ —Ä–µ–∫—É—Ä—Å–∏–∏.

üîπ –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ **–Ω–∞–º–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ**, —á–µ–º –ø—Ä–æ—Å—Ç–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —á–µ—Ä–µ–∑ `list.index()`, —Ç–∞–∫ –∫–∞–∫ `dict` –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞ O(1).
"""
