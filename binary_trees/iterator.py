# –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (BST).
# –î–∞–Ω–æ: –∫–æ—Ä–µ–Ω—å `root` –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
# –ù—É–∂–Ω–æ: —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å `BSTIterator`, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç `next()` –∏ `has_next()`.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


class BSTIterator:
    """
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è BST (–º–µ—Ç–æ–¥ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º `inorder` –æ–±—Ö–æ–¥–æ–º).
    """
    def __init__(self, root: TreeNode):
        self.nodes: list[int] = []
        self.index: int = -1
        self._inorder(root)

    def _inorder(self, node: TreeNode | None) -> None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤ `inorder` (LNR) –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ `self.nodes`.
        """
        if node:
            self._inorder(node.left)
            self.nodes.append(node.val)
            self._inorder(node.right)

    def next(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ BST.
        """
        self.index += 1
        return self.nodes[self.index]

    def has_next(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç.
        """
        return self.index + 1 < len(self.nodes)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–º–µ—Ç–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º `inorder` –æ–±—Ö–æ–¥–∞)
tree = TreeNode(7, TreeNode(3), TreeNode(15, TreeNode(9), TreeNode(20)))
iterator = BSTIterator(tree)

print(iterator.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3
print(iterator.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 7
print(iterator.has_next()) # True
print(iterator.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 9
print(iterator.has_next()) # True
print(iterator.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 15
print(iterator.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 20
print(iterator.has_next()) # False


class BSTIteratorOptimized:
    """
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è BST (–º–µ—Ç–æ–¥ —Å `stack` –∏ `inorder` –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–∞ –ª–µ—Ç—É).
    """
    def __init__(self, root: TreeNode):
        self.stack: list[TreeNode] = []
        self._leftmost_inorder(root)

    def _leftmost_inorder(self, node: TreeNode | None) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤ `stack` –≤—Å–µ –ª–µ–≤—ã–µ —É–∑–ª—ã –æ—Ç `node`.
        """
        while node:
            self.stack.append(node)
            node = node.left

    def next(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ BST.
        """
        node: TreeNode = self.stack.pop()
        if node.right:
            self._leftmost_inorder(node.right)
        return node.val

    def has_next(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç.
        """
        return len(self.stack) > 0


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å `stack`)
iterator_optimized = BSTIteratorOptimized(tree)

print(iterator_optimized.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3
print(iterator_optimized.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 7
print(iterator_optimized.has_next()) # True
print(iterator_optimized.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 9
print(iterator_optimized.has_next()) # True
print(iterator_optimized.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 15
print(iterator_optimized.next())    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 20
print(iterator_optimized.has_next()) # False


"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
1. **–ú–µ—Ç–æ–¥ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º `inorder` –æ–±—Ö–æ–¥–æ–º:**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
     - O(n) –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞.
     - O(1) –¥–ª—è `next()`.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) (—Ö—Ä–∞–Ω–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã).

2. **–ú–µ—Ç–æ–¥ —Å `stack` (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –ª–µ—Ç—É):**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
     - O(H) –¥–ª—è `next()` –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (H - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞).
     - O(1) –≤ —Å—Ä–µ–¥–Ω–µ–º.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H) (–≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞).

üîπ **–ú–µ—Ç–æ–¥ —Å–æ —Å—Ç–µ–∫–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ** –ø–æ –ø–∞–º—è—Ç–∏ (O(H) –≤–º–µ—Å—Ç–æ O(n)).
"""
