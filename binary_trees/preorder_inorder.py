# –ó–∞–¥–∞—á–∞: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ `preorder` (NLR) –∏ `inorder` (LNR) –æ–±—Ö–æ–¥–∞–º.
# –î–∞–Ω–æ: –¥–≤–∞ —Å–ø–∏—Å–∫–∞ `preorder` –∏ `inorder`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–æ–≤.
# –ù—É–∂–Ω–æ: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫–æ—Ä–µ–Ω—å.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def build_tree(preorder: list[int], inorder: list[int]) -> TreeNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ `preorder` –∏ `inorder` –æ–±—Ö–æ–¥–∞–º.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–µ–º —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É `inorder_index` –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ —Ä–µ–∫—É—Ä—Å–∏–∏.

    :param preorder: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ `preorder` –æ–±—Ö–æ–¥–∞.
    :param inorder: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ `inorder` –æ–±—Ö–æ–¥–∞.
    :return: TreeNode | None - –∫–æ—Ä–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """

    if not preorder or not inorder:
        return None

    inorder_index: dict[int, int] = {val: idx for idx, val in enumerate(inorder)}  # O(n) —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞
    pre_idx: int = 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ `preorder`

    def helper(left: int, right: int) -> TreeNode | None:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–µ–≤–∞.

        :param left: int - –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ `inorder`.
        :param right: int - –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ `inorder`.
        :return: TreeNode | None - –∫–æ—Ä–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞.
        """
        nonlocal pre_idx
        if left > right:
            return None

        root_val: int = preorder[pre_idx]  # –ë–µ—Ä—ë–º –∫–æ—Ä–µ–Ω—å –∏–∑ `preorder`
        root: TreeNode = TreeNode(root_val)
        pre_idx += 1  # –î–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å

        mid: int = inorder_index[root_val]  # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤ `inorder`
        root.left = helper(left, mid - 1)  # –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞
        root.right = helper(mid + 1, right)  # –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞

        return root

    return helper(0, len(inorder) - 1)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
preorder: list[int] = [3, 9, 20, 15, 7]
inorder: list[int] = [9, 3, 15, 20, 7]

root: TreeNode = build_tree(preorder, inorder)


"""
üîπ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**
- –ú—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —É–∑–ª—É **—Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑**.
- –ò—Å–ø–æ–ª—å–∑—É–µ–º **O(1) –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞** —á–µ—Ä–µ–∑ `dict`, —á—Ç–æ –∑–∞–º–µ–Ω—è–µ—Ç O(n) –≤—ã–∑–æ–≤—ã `list.index()`.

‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É `inorder_index` —Ä–∞–∑–º–µ—Ä–æ–º **O(n)**.
- –í—ã–∑–æ–≤—ã —Ä–µ–∫—É—Ä—Å–∏–∏ —Ç—Ä–µ–±—É—é—Ç **O(H) –ø–∞–º—è—Ç–∏**, –≥–¥–µ `H` ‚Äî –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞.
  - –í —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ `H = log n`, –≤ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º `H = n`.

üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?**
1Ô∏è‚É£ **–ë–µ—Ä–µ–º –∫–æ—Ä–µ–Ω—å –∏–∑ `preorder`** –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ **–∏–Ω–¥–µ–∫—Å –≤ `inorder`**.  
2Ô∏è‚É£ **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ** (`inorder[:mid]`).  
3Ô∏è‚É£ **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ** (`inorder[mid+1:]`).  
4Ô∏è‚É£ **–ò—Å–ø–æ–ª—å–∑—É–µ–º `dict` –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤** (O(1) –≤–º–µ—Å—Ç–æ O(n)).  

üí° **–ü–æ—á–µ–º—É —Å–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ?**
- –í `preorder` **–ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∞–≤—ã–º**, –ø–æ—ç—Ç–æ–º—É `pre_idx` –¥–≤–∏–≥–∞–µ—Ç—Å—è **–ø–æ –ø–æ—Ä—è–¥–∫—É**.

"""
