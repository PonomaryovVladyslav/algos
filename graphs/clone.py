from collections import deque


class Node:
    def __init__(self, val=0, neighbors=None):
        """
        –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞ –≤ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ.

        :param val: int - –∑–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞.
        :param neighbors: list[Node] - —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤.
        """
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []


def clone_graph(node: Node) -> Node:
    """
    –§—É–Ω–∫—Ü–∏—è –∫–ª–æ–Ω–∏—Ä—É–µ—Ç –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ **—Å –ø–æ–º–æ—â—å—é BFS**.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É O(n + e)):
    1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º **hash-map (`visited`)**, –≥–¥–µ:
       - `–∫–ª—é—á` ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª,
       - `–∑–Ω–∞—á–µ–Ω–∏–µ` ‚Äî –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–∑–µ–ª.
    2Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º —Å `node`, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∫–æ–ø–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ `visited`.
    3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º **–æ—á–µ—Ä–µ–¥—å (`queue`)** –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
    4Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞:
       - **–ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–µ–π** –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ `visited` (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç).
       - **–°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π** —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É–∑–ª–æ–º.
    5Ô∏è‚É£ –ò—Ç–æ–≥: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `visited[node]` (–∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∫–ª–æ–Ω–∞).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n + e)** (—É–∑–ª—ã + —Ä—ë–±—Ä–∞).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** (–¥–ª—è `visited` –∏ `queue`).

    :param node: Node - –Ω–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞.
    :return: Node - –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
    """

    if not node:
        return None

    # –•—ç—à-—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤
    visited = {}

    # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
    queue = deque([node])
    visited[node] = Node(node.val)

    while queue:
        old_node = queue.popleft()

        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–µ–π
        for neighbor in old_node.neighbors:
            if neighbor not in visited:
                visited[neighbor] = Node(neighbor.val)
                queue.append(neighbor)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª –≤ –æ—á–µ—Ä–µ–¥—å
            visited[old_node].neighbors.append(visited[neighbor])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–æ–Ω —Å–æ—Å–µ–¥–∞

    return visited[node]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–æ–Ω –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É–∑–ª–∞


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ 1 -- 2
#                      |    |
#                      4 -- 3
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)

node1.neighbors = [node2, node4]
node2.neighbors = [node1, node3]
node3.neighbors = [node2, node4]
node4.neighbors = [node1, node3]

cloned = clone_graph(node1)
print(cloned.val)  # ‚úÖ 1
print([n.val for n in cloned.neighbors])  # ‚úÖ [2, 4]


def clone_graph_dfs(node: Node) -> Node:
    """
    –§—É–Ω–∫—Ü–∏—è –∫–ª–æ–Ω–∏—Ä—É–µ—Ç –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ **—Å –ø–æ–º–æ—â—å—é DFS**.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–ø–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É O(n + e)):
    1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º **hash-map (`visited`)** –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π —É–∑–ª–æ–≤.
    2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º **—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π `dfs(old_node)`**, –∫–æ—Ç–æ—Ä—ã–π:
       - –°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é `old_node`,
       - –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ —Å–æ—Å–µ–¥–µ–π,
       - –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å–µ–¥–µ–π –≤ `neighbors` –∫–ª–æ–Ω–∞.
    3Ô∏è‚É£ –ò—Ç–æ–≥: `visited[node]` —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ø–∏—é –≥—Ä–∞—Ñ–∞.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n + e)** (—É–∑–ª—ã + —Ä—ë–±—Ä–∞).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)** (–¥–ª—è `visited` + —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤).

    :param node: Node - –Ω–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞.
    :return: Node - –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
    """

    if not node:
        return None

    visited = {}

    def dfs(old_node):
        if old_node in visited:
            return visited[old_node]

        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —É–∑–µ–ª
        cloned_node = Node(old_node.val)
        visited[old_node] = cloned_node

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–µ–π
        for neighbor in old_node.neighbors:
            cloned_node.neighbors.append(dfs(neighbor))

        return cloned_node

    return dfs(node)


cloned_dfs = clone_graph_dfs(node1)
print(cloned_dfs.val)  # ‚úÖ 1
print([n.val for n in cloned_dfs.neighbors])  # ‚úÖ [2, 4]
