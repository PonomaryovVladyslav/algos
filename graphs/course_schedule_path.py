from collections import deque, defaultdict


def find_order(num_courses: int, prerequisites: list[list[int]]) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –±–µ–∑ —Ü–∏–∫–ª–æ–≤ (BFS, –∞–ª–≥–æ—Ä–∏—Ç–º Kahn).

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ O(n + e)):
    1Ô∏è‚É£ **–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π** (adjacency list) –∏ **—Å—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ä—ë–±—Ä–∞**.
    2Ô∏è‚É£ **–ó–∞–ø—É—Å–∫–∞–µ–º BFS**:
       - –ù–∞—á–∏–Ω–∞–µ–º —Å –∫—É—Ä—Å–æ–≤ **–±–µ–∑ –ø—Ä–µ–¥-—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤** (`in_degree == 0`).
       - –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å, —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É —Å–æ—Å–µ–¥–µ–π.
       - –ï—Å–ª–∏ —É —Å–æ—Å–µ–¥–∞ `in_degree == 0`, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å.
    3Ô∏è‚É£ **–ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∫—É—Ä—Å—ã ‚Üí —Å–ø–∏—Å–æ–∫, –∏–Ω–∞—á–µ ‚Üí []** (–µ—Å–ª–∏ —Ü–∏–∫–ª).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n + e)** (—É–∑–ª—ã + —Ä—ë–±—Ä–∞).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n + e)** (–≥—Ä–∞—Ñ + –æ—á–µ—Ä–µ–¥—å).

    :param num_courses: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤.
    :param prerequisites: list[list[int]] - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫—É—Ä—Å–∞–º–∏ (a ‚Üí b).
    :return: list[int] - –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏–ª–∏ [] (–µ—Å–ª–∏ —Ü–∏–∫–ª).
    """

    # 1Ô∏è‚É£ –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    graph = defaultdict(list)
    in_degree = [0] * num_courses  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä

    for course, prereq in prerequisites:
        graph[prereq].append(course)  # prereq ‚Üí course
        in_degree[course] += 1

    # 2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º BFS (Kahn's Algorithm)
    queue = deque([i for i in range(num_courses) if in_degree[i] == 0])
    order = []

    while queue:
        course = queue.popleft()
        order.append(course)  # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –≤ –ø–æ—Ä—è–¥–æ–∫

        for neighbor in graph[course]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:  # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                queue.append(neighbor)

    return order if len(order) == num_courses else []  # –ï—Å–ª–∏ —Ü–∏–∫–ª ‚Üí []


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º BFS (Kahn's Algorithm)
print(find_order(4, [[1, 0], [2, 0], [3, 1], [3, 2]]))  # ‚úÖ [0, 1, 2, 3] –∏–ª–∏ [0, 2, 1, 3]
print(find_order(2, [[1, 0], [0, 1]]))  # ‚úÖ [] (–¶–∏–∫–ª)


def find_order_dfs(num_courses: int, prerequisites: list[list[int]]) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –±–µ–∑ —Ü–∏–∫–ª–æ–≤ (DFS).

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (DFS, —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ O(n + e)):
    1Ô∏è‚É£ **–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π** (adjacency list).
    2Ô∏è‚É£ **DFS –¥–ª—è —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏**:
       - –ò—Å–ø–æ–ª—å–∑—É–µ–º `visited`: `0` - –Ω–µ –ø–æ—Å–µ—â–µ–Ω, `1` - –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, `2` - –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
       - –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ü–∏–∫–ª (`visited == 1`) ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `[]`.
       - –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ `order` (–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ DFS).
    3Ô∏è‚É£ **–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–µ–∫ ‚Üí –ø–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è**.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n + e)** (—É–∑–ª—ã + —Ä—ë–±—Ä–∞).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n + e)** (–≥—Ä–∞—Ñ + —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤).

    :param num_courses: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤.
    :param prerequisites: list[list[int]] - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫—É—Ä—Å–∞–º–∏.
    :return: list[int] - –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏–ª–∏ [] (–µ—Å–ª–∏ —Ü–∏–∫–ª).
    """

    # 1Ô∏è‚É£ –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ
    graph = defaultdict(list)
    for course, prereq in prerequisites:
        graph[prereq].append(course)

    # 2Ô∏è‚É£ DFS –¥–ª—è —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    visited = [0] * num_courses  # 0 - –Ω–µ –ø–æ—Å–µ—â–µ–Ω, 1 - –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, 2 - –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    order = []

    def dfs(course):
        if visited[course] == 1:  # üî¥ –¶–∏–∫–ª –Ω–∞–π–¥–µ–Ω
            return False
        if visited[course] == 2:  # ‚úÖ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            return True

        visited[course] = 1  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for neighbor in graph[course]:
            if not dfs(neighbor):
                return False

        visited[course] = 2  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
        order.append(course)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Ä—è–¥–æ–∫
        return True

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
    for course in range(num_courses):
        if visited[course] == 0:
            if not dfs(course):
                return []

    return order[::-1]  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–µ–∫


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º DFS
print(find_order_dfs(4, [[1, 0], [2, 0], [3, 1], [3, 2]]))  # ‚úÖ [0, 1, 2, 3] –∏–ª–∏ [0, 2, 1, 3]
print(find_order_dfs(2, [[1, 0], [0, 1]]))  # ‚úÖ [] (–¶–∏–∫–ª)
