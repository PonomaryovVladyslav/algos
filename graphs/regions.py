from collections import deque


def solve(board: list[list[str]]) -> None:
    """
    –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–µ 'O', –∑–∞–º–µ–Ω—è—è –∏—Ö –Ω–∞ 'X' —Å –ø–æ–º–æ—â—å—é BFS.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (BFS, O(m * n))**:
    1Ô∏è‚É£ –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ 'O' –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º 'T'.
    2Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö BFS, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—è 'T' –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–µ 'O'.
    3Ô∏è‚É£ –û–±—Ö–æ–¥–∏–º –≤—Å—é –¥–æ—Å–∫—É, –∑–∞–º–µ–Ω—è—è:
       - –û—Å—Ç–∞–≤—à–∏–µ—Å—è 'O' –Ω–∞ 'X' (–∑–∞—Ö–≤–∞—Ç),
       - 'T' –æ–±—Ä–∞—Ç–Ω–æ –≤ 'O' (–Ω–µ –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–µ).

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(m * n)`, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(min(m, n))`, —Ç–∞–∫ –∫–∞–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≥—Ä–∞–Ω–∏—Ü—ã.

    :param board: list[list[str]] - –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞.
    :return: None (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç board –Ω–∞ –º–µ—Å—Ç–µ)
    """
    if not board:
        return

    rows, cols = len(board), len(board[0])
    queue = deque()

    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ "O" –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª "T"
    for r in range(rows):
        for c in [0, cols - 1]:  # –õ–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü—ã
            if board[r][c] == "O":
                queue.append((r, c))

    for c in range(cols):
        for r in [0, rows - 1]:  # –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã
            if board[r][c] == "O":
                queue.append((r, c))

    # BFS - –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π "O" –∫–∞–∫ "T"
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    while queue:
        r, c = queue.popleft()
        if 0 <= r < rows and 0 <= c < cols and board[r][c] == "O":
            board[r][c] = "T"  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –æ–∫—Ä—É–∂—ë–Ω–Ω–æ–µ "O"
            for dr, dc in directions:
                queue.append((r + dr, c + dc))

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º board
    for r in range(rows):
        for c in range(cols):
            if board[r][c] == "O":  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
                board[r][c] = "X"
            elif board[r][c] == "T":  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "O", –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∫—Ä—É–∂–µ–Ω—ã
                board[r][c] = "O"


# üîπ –¢–µ—Å—Ç
board = [
    ["X", "X", "X", "X"],
    ["X", "O", "O", "X"],
    ["X", "X", "O", "X"],
    ["X", "O", "X", "X"]
]

solve(board)
for row in board:
    print(row)


def solve_dfs(board: list[list[str]]) -> None:
    """
    –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–µ 'O', –∑–∞–º–µ–Ω—è—è –∏—Ö –Ω–∞ 'X' —Å –ø–æ–º–æ—â—å—é DFS.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (DFS, O(m * n))**:
    1Ô∏è‚É£ –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ 'O' –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º 'T'.
    2Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö DFS, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—è 'T' –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–µ 'O'.
    3Ô∏è‚É£ –û–±—Ö–æ–¥–∏–º –≤—Å—é –¥–æ—Å–∫—É, –∑–∞–º–µ–Ω—è—è:
       - –û—Å—Ç–∞–≤—à–∏–µ—Å—è 'O' –Ω–∞ 'X' (–∑–∞—Ö–≤–∞—Ç),
       - 'T' –æ–±—Ä–∞—Ç–Ω–æ –≤ 'O' (–Ω–µ –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–µ).

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(m * n)`, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(m * n)` –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).

    :param board: list[list[str]] - –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞.
    :return: None (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç board –Ω–∞ –º–µ—Å—Ç–µ)
    """
    if not board:
        return

    rows, cols = len(board), len(board[0])

    def dfs(r, c):
        if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != "O":
            return
        board[r][c] = "T"  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ–º
        dfs(r + 1, c)
        dfs(r - 1, c)
        dfs(r, c + 1)
        dfs(r, c - 1)

    # 1. –ò—â–µ–º –≤—Å–µ "O" –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º DFS
    for r in range(rows):
        for c in [0, cols - 1]:  # –õ–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü—ã
            if board[r][c] == "O":
                dfs(r, c)

    for c in range(cols):
        for r in [0, rows - 1]:  # –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã
            if board[r][c] == "O":
                dfs(r, c)

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º board
    for r in range(rows):
        for c in range(cols):
            if board[r][c] == "O":
                board[r][c] = "X"
            elif board[r][c] == "T":
                board[r][c] = "O"
