from collections import defaultdict, deque


def calc_equation(equations: list[list[str]], values: list[float], queries: list[list[str]]) -> list[float]:
    """
    –†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥—Ä–æ–±–µ–π —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ –∏ DFS.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (–ì—Ä–∞—Ñ + DFS, O(n + q))**:
    1Ô∏è‚É£ **–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞** (—Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–π `{a: {b: value}}`).
    2Ô∏è‚É£ **DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –æ—Ç `start` –∫ `end`**:
       - –ï—Å–ª–∏ `start == end` ‚Üí `1.0`.
       - –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å–µ–¥—è–º, —É–º–Ω–æ–∂–∞—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã.
       - –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—É—Ç—å ‚Üí `-1.0`.
    3Ô∏è‚É£ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã (`queries`) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - **–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞:** `O(n)`, –≥–¥–µ `n` ‚Äî —á–∏—Å–ª–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–π.
       - **–ü–æ–∏—Å–∫ (DFS):** `O(q * n)`, –≥–¥–µ `q` ‚Äî —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä—ë–±—Ä–∞).
       - **–ò—Ç–æ–≥–æ:** `O(n + q * n)`, –Ω–æ –æ–±—ã—á–Ω–æ –≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ (`O(n + q)`).

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - **–ì—Ä–∞—Ñ:** `O(n)`.
       - **–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å—Ç–µ–∫ DFS:** `O(n)`.
       - **–ò—Ç–æ–≥–æ:** `O(n)`.

    :param equations: list[list[str]] - –ø–∞—Ä—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, [["a", "b"], ["b", "c"]].
    :param values: list[float] - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, [2.0, 3.0].
    :param queries: list[list[str]] - –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, [["a", "c"], ["b", "a"]].
    :return: list[float] - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, [6.0, 0.5].
    """

    # 1Ô∏è‚É£ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    graph = defaultdict(dict)

    for (a, b), value in zip(equations, values):
        graph[a][b] = value
        graph[b][a] = 1 / value  # –û–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ

    # 2Ô∏è‚É£ DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    def dfs(start, end, visited):
        if start not in graph or end not in graph:
            return -1.0
        if start == end:
            return 1.0
        visited.add(start)

        for neighbor, weight in graph[start].items():
            if neighbor not in visited:
                result = dfs(neighbor, end, visited)
                if result != -1.0:
                    return result * weight  # –£–º–Ω–æ–∂–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –ø—É—Ç–∏

        return -1.0

    # 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
    return [dfs(c, d, set()) for c, d in queries]


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º DFS
equations = [["a", "b"], ["b", "c"]]
values = [2.0, 3.0]
queries = [["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"]]

print(calc_equation(equations, values, queries))  # ‚úÖ [6.0, 0.5, -1.0, 1.0, -1.0]


def calc_equation_bfs(equations: list[list[str]], values: list[float], queries: list[list[str]]) -> list[float]:
    """
    –†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥—Ä–æ–±–µ–π —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ –∏ BFS.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (–ì—Ä–∞—Ñ + BFS, O(n + q))**:
    1Ô∏è‚É£ **–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞**.
    2Ô∏è‚É£ **BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –æ—Ç `start` –∫ `end`**:
       - –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å `deque([(node, product)])`, –≥–¥–µ `product` ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.
       - –ï—Å–ª–∏ –Ω–∞—à–ª–∏ `end` ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `product`.
       - –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Üí `-1.0`.
    3Ô∏è‚É£ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã (`queries`) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - **–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞:** `O(n)`.
       - **–ü–æ–∏—Å–∫ (BFS):** `O(q * n)`, –≥–¥–µ `q` ‚Äî —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤.
       - **–ò—Ç–æ–≥–æ:** `O(n + q * n)`, –Ω–æ –æ–±—ã—á–Ω–æ –≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ (`O(n + q)`).

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - **–ì—Ä–∞—Ñ:** `O(n)`.
       - **–û—á–µ—Ä–µ–¥—å BFS:** `O(n)`.
       - **–ò—Ç–æ–≥–æ:** `O(n)`.

    :param equations: list[list[str]] - –ø–∞—Ä—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
    :param values: list[float] - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
    :param queries: list[list[str]] - –∑–∞–ø—Ä–æ—Å—ã.
    :return: list[float] - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤.
    """

    # 1Ô∏è‚É£ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    graph = defaultdict(dict)

    for (a, b), value in zip(equations, values):
        graph[a][b] = value
        graph[b][a] = 1 / value

    # 2Ô∏è‚É£ BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    def bfs(start, end):
        if start not in graph or end not in graph:
            return -1.0
        if start == end:
            return 1.0

        queue = deque([(start, 1.0)])  # (—É–∑–µ–ª, –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
        visited = set()

        while queue:
            node, product = queue.popleft()
            if node == end:
                return product  # –ù–∞—à–ª–∏ –ø—É—Ç—å

            visited.add(node)

            for neighbor, weight in graph[node].items():
                if neighbor not in visited:
                    queue.append((neighbor, product * weight))

        return -1.0  # –ù–µ –Ω–∞—à–ª–∏ –ø—É—Ç—å

    # 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
    return [bfs(c, d) for c, d in queries]


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º BFS
print(calc_equation_bfs(equations, values, queries))  # ‚úÖ [6.0, 0.5, -1.0, 1.0, -1.0]
