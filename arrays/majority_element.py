# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ —á–µ–º ‚åän / 2‚åã —Ä–∞–∑ (–º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç).
# –î–∞–Ω–æ: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª `nums`.
# –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –±–æ–ª–µ–µ —á–µ–º n / 2 —Ä–∞–∑.
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

def find_majority(nums: list[int]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—ç–ª–µ–º–µ–Ω—Ç, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–π—Å—è –±–æ–ª–µ–µ —á–µ–º n/2 —Ä–∞–∑).

    :param nums: list[int] - —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
    :return: int - –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
    """

    count: int = 0
    candidate: int | None = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞

    # –ê–ª–≥–æ—Ä–∏—Ç–º –ë–æ–π–µ—Ä–∞-–ú—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    for num in nums:
        if count == 0:  # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate = num
        count += 1 if num == candidate else -1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º/—É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫

    return candidate  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
nums = [2, 2, 1, 1, 1, 2, 2, 3, 5, 6, 2, 2, 2, 2]
print(find_majority(nums))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ –æ–¥–∏–Ω —Ä–∞–∑.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (`candidate` –∏ `count`).
"""
