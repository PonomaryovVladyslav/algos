from collections import deque

# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –≤–∏–¥–∏–º—ã–µ —É–∑–ª—ã –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å–ø—Ä–∞–≤–∞.
# –î–∞–Ω–æ: –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∫–æ—Ä–Ω–µ–º `root`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã —Å–ø—Ä–∞–≤–∞.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def right_side_view(root: TreeNode) -> list[int]:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤, –≤–∏–¥–∏–º—ã—Ö –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å–ø—Ä–∞–≤–∞ (BFS).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: list[int] - —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤.
    """

    if not root:
        return []

    queue: deque[TreeNode] = deque([root])
    result: list[int] = []

    while queue:
        level_size: int = len(queue)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
        for i in range(level_size):
            node: TreeNode = queue.popleft()
            if i == level_size - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª —É—Ä–æ–≤–Ω—è (—Å–ø—Ä–∞–≤–∞)
                result.append(node.val)

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–º–µ—Ç–æ–¥ BFS)
tree = TreeNode(1,
    TreeNode(2, None, TreeNode(5)),
    TreeNode(3, None, TreeNode(4))
)

print(right_side_view(tree))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 3, 4]


def right_side_view_dfs(root: TreeNode) -> list[int]:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤, –≤–∏–¥–∏–º—ã—Ö –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å–ø—Ä–∞–≤–∞ (DFS).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: list[int] - —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤.
    """

    result: list[int] = []

    def dfs(node: TreeNode, level: int) -> None:
        """
        –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS), –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–∞–≤—ã—Ö —É–∑–ª–æ–≤.

        :param node: TreeNode - —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª.
        :param level: int - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ä–µ–≤–∞.
        """
        if not node:
            return

        if level == len(result):  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —É–∑–µ–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ (—Å–∞–º—ã–π –ø—Ä–∞–≤—ã–π)
            result.append(node.val)

        dfs(node.right, level + 1)  # –°–Ω–∞—á–∞–ª–∞ –∏–¥–µ–º –≤–ø—Ä–∞–≤–æ
        dfs(node.left, level + 1)  # –ó–∞—Ç–µ–º –≤–ª–µ–≤–æ

    dfs(root, 0)
    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–º–µ—Ç–æ–¥ DFS)
print(right_side_view_dfs(tree))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 3, 4]

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
1. **–ú–µ—Ç–æ–¥ BFS (–ø–æ —É—Ä–æ–≤–Ω—è–º —Å –æ—á–µ—Ä–µ–¥—å—é):**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m), –≥–¥–µ `m` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (—à–∏—Ä–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞).

2. **–ú–µ—Ç–æ–¥ DFS (–æ–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π):**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —É–∑–ª—É –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), –≥–¥–µ `H` ‚Äî –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).
     –í —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ `H = log n`, –≤ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ–º `H = n`, —Ç–∞–∫ —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º O(log n).

üîπ **–ú–µ—Ç–æ–¥ DFS —á–∞—Å—Ç–æ –±—ã—Å—Ç—Ä–µ–µ**, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ —É—Ä–æ–≤–Ω—è.
"""
