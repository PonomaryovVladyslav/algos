from collections import deque

# –ó–∞–¥–∞—á–∞: –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∏–≥–∑–∞–≥–æ–æ–±—Ä–∞–∑–Ω—ã–π –æ–±—Ö–æ–¥ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
# –î–∞–Ω–æ: –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∫–æ—Ä–Ω–µ–º `root`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π, –≥–¥–µ —É–∑–ª—ã –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —á–µ—Ä–µ–¥—É—é—â–µ–º—Å—è –ø–æ—Ä—è–¥–∫–µ.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def zigzag_level_order(root: TreeNode) -> list[list[int]]:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∏–≥–∑–∞–≥–æ–æ–±—Ä–∞–∑–Ω—ã–π –æ–±—Ö–æ–¥ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: list[list[int]] - —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –ø–æ—Ä—è–¥–∫–∞–º–∏.
    """

    if not root:
        return []

    queue: deque[TreeNode] = deque([root])
    result: list[list[int]] = []
    left_to_right: bool = True  # –§–ª–∞–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ö–æ–¥–∞

    while queue:
        level_size: int = len(queue)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
        level_nodes: deque[int] = deque()  # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        for _ in range(level_size):
            node: TreeNode = queue.popleft()
            if left_to_right:
                level_nodes.append(node.val)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü (–æ–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            else:
                level_nodes.appendleft(node.val)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

        result.append(list(level_nodes))
        left_to_right = not left_to_right  # –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞

    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
tree = TreeNode(3,
    TreeNode(9),
    TreeNode(20, TreeNode(15), TreeNode(7))
)

print(zigzag_level_order(tree))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [[3], [20, 9], [15, 7]]

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m), –≥–¥–µ `m` ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ (—à–∏—Ä–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞).

üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `deque` –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã **–≤ –Ω–∞—á–∞–ª–æ** –∏ **–≤ –∫–æ–Ω–µ—Ü** –∑–∞ O(1).
"""
