class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def reverse_k_group(head: ListNode, k: int) -> ListNode:
    """
    –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ `k` —É–∑–ª–æ–≤.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º**:
       1. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞.
       2. –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è, –ø–æ–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç `k` —É–∑–ª–æ–≤ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.
       3. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ `k` —É–∑–ª–æ–≤.
       4. –°–æ–µ–¥–∏–Ω—è–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –≥—Ä—É–ø–ø—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç—å—é.
       5. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è `k` —É–∑–ª–æ–≤.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —É–∑–µ–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã (–ø–æ–¥—Å—á–µ—Ç + —Ä–∞–∑–≤–æ—Ä–æ—Ç).

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(1)`, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞–º—è—Ç—å.

    :param head: ListNode - –ì–æ–ª–æ–≤–∞ —Å–ø–∏—Å–∫–∞.
    :param k: int - –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.
    :return: ListNode - –ù–æ–≤–∞—è –≥–æ–ª–æ–≤–∞ —Å–ø–∏—Å–∫–∞.
    """
    def reverse(first, last):
        prev, curr = None, first
        while curr != last:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev

    dummy = ListNode(0, head)
    prev_group = dummy
    curr = head

    # –°—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞
    length = 0
    while curr:
        length += 1
        curr = curr.next

    curr = head
    while length >= k:
        next_group = curr
        for _ in range(k):
            next_group = next_group.next

        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º k-—É–∑–ª–æ–≤—É—é –≥—Ä—É–ø–ø—É
        new_head = reverse(curr, next_group)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–π –∫—É—Å–æ–∫
        prev_group.next = new_head
        curr.next = next_group

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ
        prev_group = curr
        curr = next_group
        length -= k

    return dummy.next


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ Python
def list_to_linked(lst):
    dummy = ListNode()
    cur = dummy
    for val in lst:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
def linked_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result


# –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
head = list_to_linked([1, 2, 3, 4, 5, 6, 7, 8])
k = 3
new_head = reverse_k_group(head, k)
print(linked_to_list(new_head))  # ‚úÖ [3, 2, 1, 6, 5, 4, 7, 8]

head = list_to_linked([1, 2, 3, 4, 5])
k = 2
new_head = reverse_k_group(head, k)
print(linked_to_list(new_head))  # ‚úÖ [2, 1, 4, 3, 5]

head = list_to_linked([1])
k = 1
new_head = reverse_k_group(head, k)
print(linked_to_list(new_head))  # ‚úÖ [1]

head = list_to_linked([1, 2, 3, 4, 5])
k = 3
new_head = reverse_k_group(head, k)
print(linked_to_list(new_head))  # ‚úÖ [3, 2, 1, 4, 5]
