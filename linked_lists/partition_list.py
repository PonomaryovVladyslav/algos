class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def partition(head: ListNode, x: int) -> ListNode:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Å–µ —É–∑–ª—ã < x –±—ã–ª–∏ –ø–µ—Ä–µ–¥ —É–∑–ª–∞–º–∏ >= x,
    —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º**:
       - –°–æ–∑–¥–∞—ë–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞: –æ–¥–∏–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ `< x`, –¥—Ä—É–≥–æ–π –¥–ª—è `>= x`.
       - –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∑–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏.
       - –°–æ–µ–¥–∏–Ω—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    üîπ **–°–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –æ–¥–∏–Ω —Ä–∞–∑.
       - `O(1)` –ø–æ –ø–∞–º—è—Ç–∏ (–Ω–µ —É—á–∏—Ç—ã–≤–∞—è –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫).

    """

    before_dummy = ListNode(0)  # –ù–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ < x
    after_dummy = ListNode(0)   # –ù–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ >= x
    before = before_dummy
    after = after_dummy

    while head:
        if head.val < x:
            before.next = head
            before = before.next
        else:
            after.next = head
            after = after.next
        head = head.next

    after.next = None  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–∏—Å–æ–∫ >= x
    before.next = after_dummy.next  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏

    return before_dummy.next


# üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def print_list(head):
    values = []
    while head:
        values.append(str(head.val))
        head = head.next
    print(" -> ".join(values))


# –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: 1 -> 4 -> 3 -> 2 -> 5 -> 2
head = ListNode(1, ListNode(4, ListNode(3, ListNode(2, ListNode(5, ListNode(2))))))

print("–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
print_list(head)

# –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 3
new_head = partition(head, 3)

print("\n–ü–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è (x=3):")
print_list(new_head)
