class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

    def set_next(self, next):
        self.next = next


def find_cycle(head: ListNode) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–∏–∫–ª–∞ –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (–§–ª–æ–π–¥ "—á–µ—Ä–µ–ø–∞—Ö–∞ –∏ –∑–∞—è—Ü")**:
       1. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (`slow`, `fast`).
       2. `slow` –¥–≤–∏–∂–µ—Ç—Å—è –Ω–∞ 1 —à–∞–≥, `fast` –Ω–∞ 2 —à–∞–≥–∞.
       3. –ï—Å–ª–∏ `fast` –¥–æ–≥–æ–Ω–∏—Ç `slow`, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å —Ü–∏–∫–ª.
       4. –ï—Å–ª–∏ `fast` –¥–æ—Å—Ç–∏–≥–∞–µ—Ç `None`, —Ü–∏–∫–ª–∞ –Ω–µ—Ç.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –æ–±–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(1)`, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è.

    :param head: ListNode - –ì–æ–ª–æ–≤–∞ —Å–ø–∏—Å–∫–∞.
    :return: bool - `True`, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª, –∏–Ω–∞—á–µ `False`.
    """
    slow, fast = head, head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True  # –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª

    return False  # –¶–∏–∫–ª–∞ –Ω–µ—Ç


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å —Ü–∏–∫–ª–æ–º:
l1 = ListNode(3)
l2 = ListNode(2)
l3 = ListNode(0)
l4 = ListNode(-4)

l1.set_next(l2)
l2.set_next(l3)
l3.set_next(l4)
l4.set_next(l2)  # –¶–∏–∫–ª: l4 ‚Üí l2

print(find_cycle(l1))  # ‚úÖ True

# –¢–µ—Å—Ç –±–µ–∑ —Ü–∏–∫–ª–∞
l5 = ListNode(1)
l6 = ListNode(2)
l5.set_next(l6)

print(find_cycle(l5))  # ‚úÖ False
