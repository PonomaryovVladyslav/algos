brackets = {
    "}": "{",
    "]": "[",
    ")": "("
}

def is_valid_brackets(s: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ `s` –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.

    üîπ **–ú–µ—Ç–æ–¥**: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫
    üîπ **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: O(n) ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–µ –æ–¥–∏–Ω —Ä–∞–∑
    üîπ **–ü–∞–º—è—Ç—å**: O(n) ‚Äî —Å—Ç–µ–∫ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ

    ‚úÖ **–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã**:
       ```
       –í—Ö–æ–¥: "(()())"  ‚Üí –í—ã—Ö–æ–¥: True
       –í—Ö–æ–¥: ")()())"  ‚Üí –í—ã—Ö–æ–¥: False
       –í—Ö–æ–¥: "))(("    ‚Üí –í—ã—Ö–æ–¥: False
       –í—Ö–æ–¥: "((()))"  ‚Üí –í—ã—Ö–æ–¥: True
       ```
    """
    stack = []
    for char in s:
        if char in brackets.values():  # –û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
            stack.append(char)
        elif char in brackets:  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
            if not stack or stack[-1] != brackets[char]:  # –ù–µ—Ç –ø–∞—Ä—ã
                return False
            stack.pop()  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É

    return not stack  # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è

# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
s1 = "(()())"
s2 = ")()())"
s3 = "))(("
s4 = "((()))"
s5 = "{[()]}"
s6 = "{[(])}"  # ‚ùå –ù–µ–≤–µ—Ä–Ω–æ: —Å–∫–æ–±–∫–∏ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
s7 = "{[()()]}"  # ‚úÖ –í–µ—Ä–Ω–æ
s8 = "[({})](())"

print(is_valid_brackets(s1))  # ‚úÖ True
print(is_valid_brackets(s2))  # ‚ùå False
print(is_valid_brackets(s3))  # ‚ùå False
print(is_valid_brackets(s4))  # ‚úÖ True
print(is_valid_brackets(s5))  # ‚úÖ True
print(is_valid_brackets(s6))  # ‚ùå False
print(is_valid_brackets(s7))  # ‚úÖ True
print(is_valid_brackets(s8))  # ‚úÖ True
