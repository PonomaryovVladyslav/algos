def find_longest_valid_brackets(s: str) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–æ–±–æ–∫.

    üîπ **–ú–µ—Ç–æ–¥**: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –Ω–∞—á–∞–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.
    üîπ **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: O(n) ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–µ.
    üîπ **–ü–∞–º—è—Ç—å**: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ —Å—Ç–µ–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏.

    ‚úÖ **–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã**:
       ```
       –í—Ö–æ–¥: "(()())" ‚Üí –í—ã—Ö–æ–¥: 6
       –í—Ö–æ–¥: ")()())" ‚Üí –í—ã—Ö–æ–¥: 4
       –í—Ö–æ–¥: "))((" ‚Üí –í—ã—Ö–æ–¥: 0
       ```
    """
    stack = []
    longest = 0
    start = -1  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏

    for i, char in enumerate(s):
        if char == "(":  
            stack.append(i)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        else:
            if stack:
                stack.pop()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–∫–æ–±–∫—É
                if stack:
                    longest = max(longest, i - stack[-1])  # –î–ª–∏–Ω–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤ —Å—Ç–µ–∫–µ
                else:
                    longest = max(longest, i - start)  # –î–ª–∏–Ω–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –Ω–∞—á–∞–ª–æ–º
            else:
                start = i  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    return longest

# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(find_longest_valid_brackets("(()())"))  # ‚úÖ 6
print(find_longest_valid_brackets(")()())"))  # ‚úÖ 4
print(find_longest_valid_brackets("))(("))    # ‚úÖ 0
print(find_longest_valid_brackets("()(()"))   # ‚úÖ 2
print(find_longest_valid_brackets("()()()"))  # ‚úÖ 6
