def find_biggest_right(nums):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –±–æ–ª—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –≤ `nums`.

    üîπ **–ú–µ—Ç–æ–¥**: Monotonic Stack (—É–±—ã–≤–∞—é—â–∏–π —Å—Ç–µ–∫)
    üîπ **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: O(n), —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∏ —É–¥–∞–ª—è–µ—Ç—Å—è 1 —Ä–∞–∑.

    ‚úÖ **–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã**:
       ```
       –í—Ö–æ–¥: [4, 1, 2, 5, 3]
       –í—ã—Ö–æ–¥: [5, 2, 5, -1, -1]
       ```
    """
    biggest_right = [-1] * len(nums)  # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (-1, –µ—Å–ª–∏ –Ω–µ—Ç –±–æ–ª—å—à–µ–≥–æ)
    stack = []  # –ú–æ–Ω–æ—Ç–æ–Ω–Ω—ã–π —Å—Ç–µ–∫ (—É–±—ã–≤–∞–µ—Ç)

    # –î–≤–∏–≥–∞–µ–º—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
    for i in range(len(nums) - 1, -1, -1):
        while stack and stack[-1] <= nums[i]:
            stack.pop()  # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç–µ–∫–∞
        if stack:
            biggest_right[i] = stack[-1]  # –°–ª–µ–¥—É—é—â–∏–π –±–æ–ª—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç
        stack.append(nums[i])  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç

    return biggest_right

# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
nums1 = [4, 1, 2, 5, 3]
nums2 = [10, 3, 7, 2, 8]
nums3 = [2, 7, 3, 5, 1, 6, 9, 8]
nums4 = [5, 4, 3, 2, 1]

print(find_biggest_right(nums1))  # ‚úÖ [5, 2, 5, -1, -1]
print(find_biggest_right(nums2))  # ‚úÖ [-1, 7, 8, 8, -1]
print(find_biggest_right(nums3))  # ‚úÖ [7, 9, 5, 6, 6, 9, -1, -1]
print(find_biggest_right(nums4))  # ‚úÖ [-1, -1, -1, -1, -1]
