# –ó–∞–¥–∞—á–∞: –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö –±–∏–Ω–∞—Ä–Ω—ã—Ö —á–∏—Å–µ–ª, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫.
# –î–∞–Ω–æ: –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ `a` –∏ `b`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —á–∏—Å–ª–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É –≤ –≤–∏–¥–µ –±–∏–Ω–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

def add_binary(a: str, b: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö —á–∏—Å–ª–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ `n` ‚Äî –¥–ª–∏–Ω–∞ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π `n+1` (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å).

    :param a: str - –ø–µ—Ä–≤–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ.
    :param b: str - –≤—Ç–æ—Ä–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ.
    :return: str - —Å—É–º–º–∞ `a` –∏ `b` –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ.
    """

    result: list[str] = []
    carry: int = 0

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–ª–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è—è –Ω—É–ª–∏ –≤ –Ω–∞—á–∞–ª–æ
    max_length: int = max(len(a), len(b))
    a, b = a.zfill(max_length), b.zfill(max_length)

    # –°–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–±–∏—Ç–æ–≤–æ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
    for i in range(max_length - 1, -1, -1):
        bit_sum: int = int(a[i]) + int(b[i]) + carry
        result.append(str(bit_sum % 2))  # –î–æ–±–∞–≤–ª—è–µ–º 0 –∏–ª–∏ 1
        carry = bit_sum // 2  # –ù–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å

    if carry:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø–µ—Ä–µ–Ω–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        result.append("1")

    return "".join(result[::-1])  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(add_binary("11", "1"))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "100"
print(add_binary("1010", "1011"))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "10101"
print(add_binary("0", "0"))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "0"
print(add_binary("111", "111"))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "1110"
print(add_binary("1001", "110"))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "1111"


"""
üîπ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**
   - –ú—ã –≤—ã–ø–æ–ª–Ω—è–µ–º `O(n)` –æ–ø–µ—Ä–∞—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –û–ø–µ—Ä–∞—Ü–∏–∏ `.zfill()` –∏ `.join()` —Ä–∞–±–æ—Ç–∞—é—Ç –∑–∞ O(n).

‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º `result`, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç `n+1` –±–∏—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å).
   - –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `111 + 111`) —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–∞ 1 –±–∏—Ç –¥–ª–∏–Ω–Ω–µ–µ.

üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?**
1Ô∏è‚É£ **–í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã —á–∏—Å–µ–ª** (–µ—Å–ª–∏ –æ–¥–Ω–æ –∫–æ—Ä–æ—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º `0` –≤ –Ω–∞—á–∞–ª–æ).  
2Ô∏è‚É£ **–°–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–±–∏—Ç–æ–≤–æ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ**, —É—á–∏—Ç—ã–≤–∞—è `carry`.  
3Ô∏è‚É£ **–§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç**, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É.  
4Ô∏è‚É£ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è `carry`, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ.

üí° **–ü–æ—á–µ–º—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º `zfill()`?**
- –≠—Ç–æ –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å `0` –ø–µ—Ä–µ–¥ –∫–æ—Ä–æ—Ç–∫–∏–º —á–∏—Å–ª–æ–º.
- `.zfill()` —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n), —á—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å.

"""
