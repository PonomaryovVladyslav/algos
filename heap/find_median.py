from heapq import heappush, heappop


class MedianFinder:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞–Ω—ã –ø–æ—Ç–æ–∫–∞ —á–∏—Å–µ–ª.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (O(log n) –Ω–∞ –≤—Å—Ç–∞–≤–∫—É, O(1) –Ω–∞ –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞–Ω—ã)**:
       - –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–µ –∫—É—á–∏:
         1Ô∏è‚É£ `max_heap` (–ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞) —Ö—Ä–∞–Ω–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—è max heap.
         2Ô∏è‚É£ `min_heap` (–ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞) —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —è–≤–ª—è—è—Å—å min heap.
       - –í—Å—Ç–∞–≤–ª—è–µ–º –≤ `max_heap`, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ `min_heap`.
       - –ï—Å–ª–∏ `min_heap` –±–æ–ª—å—à–µ `max_heap`, –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `add_num`: O(log n) –∑–∞ —Å—á—ë—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫—É—á—É.
       - `find_median`: O(1), —Ç–∞–∫ –∫–∞–∫ –º–µ–¥–∏–∞–Ω–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —á–∏—Å–ª–∞.

    """

    def __init__(self):
        self.max_heap = []  # –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (max heap —á–µ—Ä–µ–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        self.min_heap = []  # –ü—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (min heap)

    def add_num(self, num: int) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —á–∏—Å–ª–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö.

        :param num: int - –ß–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        heappush(self.max_heap, -num)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ max heap (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –∑–Ω–∞–∫)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–∞–∫—Å. —ç–ª–µ–º–µ–Ω—Ç –∏–∑ max_heap –≤ min_heap –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        heappush(self.min_heap, -heappop(self.max_heap))

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º `max_heap` –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω—ã–º –ø–æ —Ä–∞–∑–º–µ—Ä—É `min_heap`
        if len(self.max_heap) < len(self.min_heap):
            heappush(self.max_heap, -heappop(self.min_heap))

    def find_median(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–µ–¥–∏–∞–Ω—É.

        :return: float - –ú–µ–¥–∏–∞–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ —á–∏—Å–µ–ª.
        """
        if len(self.max_heap) > len(self.min_heap):
            return -self.max_heap[0]  # –ß–∏—Å–ª–æ –∏–∑ max_heap
        return (-self.max_heap[0] + self.min_heap[0]) / 2  # –°—Ä–µ–¥–Ω–µ–µ –¥–≤—É—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö


# üîπ –¢–µ—Å—Ç—ã
mf = MedianFinder()
mf.add_num(1)
mf.add_num(2)
print(mf.find_median())  # ‚úÖ 1.5
mf.add_num(3)
print(mf.find_median())  # ‚úÖ 2
mf.add_num(4)
print(mf.find_median())  # ‚úÖ 2.5
mf.add_num(5)
print(mf.find_median())  # ‚úÖ 3
