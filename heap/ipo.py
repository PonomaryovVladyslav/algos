from heapq import heappush, heappop


def find_maximized_capital(k: int, w: int, profits: list[int], capital: list[int]) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ `k` –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (–ñ–∞–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ + Max Heap)**:
       - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ `capital`, —á—Ç–æ–±—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –ø–æ –º–µ—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
       - –ò—Å–ø–æ–ª—å–∑—É–µ–º `max_heap` (max-heap —á–µ—Ä–µ–∑ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
       - –ü—Ä–æ—Ö–æ–¥–∏–º `k` —Ä–∞—É–Ω–¥–æ–≤:
         1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ `max_heap`.
         2Ô∏è‚É£ –ë–µ—Ä—ë–º –ø—Ä–æ–µ–∫—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é (–∏–∑ `max_heap`).
         3Ô∏è‚É£ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª `w` –Ω–∞ –ø—Ä–∏–±—ã–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: `O(n log n)`.
       - –ü–µ—Ä–µ–±–æ—Ä `k` –∏—Ç–µ—Ä–∞—Ü–∏–π —Å `O(log n)` –Ω–∞ `heappush/heappop`: `O(k log n)`.
       - –ò—Ç–æ–≥: `O(n log n + k log n) ‚âà O(n log n)` (—Ç–∞–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ `k < n`).

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)` –∏–∑-–∑–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫—É—á–∏.

    :param k: int - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.
    :param w: int - –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª.
    :param profits: list[int] - –ü—Ä–∏–±—ã–ª—å –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    :param capital: list[int] - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    :return: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –ø–æ—Å–ª–µ `k` –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.
    """
    projects = sorted(zip(capital, profits))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ capital (O(n log n))
    max_heap = []  # Max Heap (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–±—ã–ª–∏)
    i = 0  # –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç

    for _ in range(k):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫—É—á—É
        while i < len(projects) and projects[i][0] <= w:
            heappush(max_heap, -projects[i][1])  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è max heap
            i += 1

        if not max_heap:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            break

        w += -heappop(max_heap)  # –ë–µ—Ä—ë–º –ø—Ä–æ–µ–∫—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é

    return w


# üîπ –¢–µ—Å—Ç—ã
print(find_maximized_capital(2, 0, [1, 2, 3], [0, 1, 1]))  # ‚úÖ 4
print(find_maximized_capital(3, 0, [1, 2, 3], [1, 1, 2]))  # ‚úÖ 0
print(find_maximized_capital(1, 2, [1, 2, 3], [1, 2, 3]))  # ‚úÖ 3
print(find_maximized_capital(3, 0, [5, 1, 10], [0, 1, 2]))  # ‚úÖ 16
