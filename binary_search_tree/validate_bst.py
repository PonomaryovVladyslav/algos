# –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ (BST) –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.
# –î–∞–Ω–æ: –∫–æ—Ä–µ–Ω—å `root` –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `True`, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ BST, –∏–Ω–∞—á–µ `False`.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (BST).
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def is_valid_bst(root: TreeNode) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ—Ä–µ–≤–æ `root` –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º BST (–º–µ—Ç–æ–¥ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: bool - `True`, –µ—Å–ª–∏ `root` - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BST, –∏–Ω–∞—á–µ `False`.
    """

    def validate(node: TreeNode, min_val: float, max_val: float) -> bool:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∑–ª–∞ BST.

        :param node: TreeNode - —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª.
        :param min_val: float - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞).
        :param max_val: float - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞).
        :return: bool - `True`, –µ—Å–ª–∏ —É–∑–µ–ª —Å–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ BST.
        """
        if not node:
            return True

        if not (min_val < node.val < max_val):  # –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ BST
            return False

        return validate(node.left, min_val, node.val) and validate(node.right, node.val, max_val)

    return validate(root, float('-inf'), float('inf'))


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–º–µ—Ç–æ–¥ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π)
# –í–µ—Ä–Ω–æ–µ BST
tree1 = TreeNode(2, TreeNode(1), TreeNode(3))
print(is_valid_bst(tree1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True

# –ù–µ–≤–µ—Ä–Ω–æ–µ BST
tree2 = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))
print(is_valid_bst(tree2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False


def is_valid_bst_inorder(root: TreeNode) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ—Ä–µ–≤–æ `root` –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º BST (–º–µ—Ç–æ–¥ —Å inorder –æ–±—Ö–æ–¥–æ–º).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    :return: bool - `True`, –µ—Å–ª–∏ `root` - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BST, –∏–Ω–∞—á–µ `False`.
    """

    prev: float = float('-inf')

    def inorder(node: TreeNode) -> bool:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π inorder –æ–±—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ BST.

        :param node: TreeNode - —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª.
        :return: bool - `True`, –µ—Å–ª–∏ —É–∑–ª—ã –∏–¥—É—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
        """
        nonlocal prev
        if not node:
            return True

        if not inorder(node.left):  # –õ–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
            return False

        if node.val <= prev:  # –ï—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞—Ä—É—à–µ–Ω
            return False
        prev = node.val  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª

        return inorder(node.right)  # –ü—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ

    return inorder(root)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–º–µ—Ç–æ–¥ —Å inorder –æ–±—Ö–æ–¥–æ–º)
print(is_valid_bst_inorder(tree1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(is_valid_bst_inorder(tree2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
1. **–ú–µ—Ç–æ–¥ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π:**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —É–∑–µ–ª –ø–æ—Å–µ—â–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), –≥–¥–µ `H` - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).

2. **–ú–µ—Ç–æ–¥ —Å inorder –æ–±—Ö–æ–¥–æ–º:**
   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É–∑–ª–∞–º.
   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–µ–∫ —Ä–µ–∫—É—Ä—Å–∏–∏.

üîπ –ú–µ—Ç–æ–¥ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π **–±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–µ–Ω** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ BST, –Ω–æ **–º–µ—Ç–æ–¥ —Å inorder –æ–±—Ö–æ–¥–æ–º** –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π.
"""
