# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –¥–≤—É–º—è —É–∑–ª–∞–º–∏ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ (BST).
# –î–∞–Ω–æ: –∫–æ—Ä–µ–Ω—å `root` –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–≤—É—Ö —É–∑–ª–æ–≤.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (BST).
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def get_minimum_difference(root: TreeNode) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –¥–≤—É–º—è —É–∑–ª–∞–º–∏ BST (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π inorder).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
    :return: int - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —É–∑–ª–æ–≤.
    """

    min_diff: int = float('inf')
    prev: int | None = None

    def inorder(node: TreeNode) -> None:
        """
        –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ –ø–æ—Ä—è–¥–∫–µ inorder (LNR), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã BST.

        :param node: TreeNode - —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª.
        """
        nonlocal min_diff, prev
        if not node:
            return

        inorder(node.left)  # –õ–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ

        if prev is not None:
            min_diff = min(min_diff, node.val - prev)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        prev = node.val  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª

        inorder(node.right)  # –ü—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ

    inorder(root)
    return min_diff


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
tree = TreeNode(4,
    TreeNode(2, TreeNode(1), TreeNode(3)),
    TreeNode(6)
)

print(get_minimum_difference(tree))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1


def get_minimum_difference_iterative(root: TreeNode) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –¥–≤—É–º—è —É–∑–ª–∞–º–∏ BST (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π inorder).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
    :return: int - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —É–∑–ª–æ–≤.
    """

    min_diff: int = float('inf')
    prev: int | None = None
    stack: list[TreeNode] = []
    node: TreeNode | None = root

    while stack or node:
        while node:
            stack.append(node)
            node = node.left  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ

        node = stack.pop()  # –î–æ—Å—Ç–∞–µ–º —É–∑–µ–ª

        if prev is not None:
            min_diff = min(min_diff, node.val - prev)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        prev = node.val  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª

        node = node.right  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ

    return min_diff


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
print(get_minimum_difference_iterative(tree))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–æ—Å–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ (inorder –æ–±—Ö–æ–¥).
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
  - O(H) –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏).
  - O(H) –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–∏–∑-–∑–∞ —Å—Ç–µ–∫–∞).
  –í —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ `H = log n`, –≤ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ–º `H = n`, —Ç–∞–∫ —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º O(log n).
"""
