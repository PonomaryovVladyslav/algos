# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ k-–π –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ (BST).
# –î–∞–Ω–æ: –∫–æ—Ä–µ–Ω—å `root` –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ –∏ —á–∏—Å–ª–æ `k`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `k`-–π –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç (–≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è).

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (BST).
    """
    def __init__(self, val: int = 0, left: "TreeNode" = None, right: "TreeNode" = None):
        self.val = val
        self.left = left
        self.right = right


def kth_smallest(root: TreeNode, k: int) -> int:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ k-–≥–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ BST (—á–µ—Ä–µ–∑ inorder-–ø—Ä–æ—Ö–æ–¥).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
    :param k: int - –Ω–æ–º–µ—Ä –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (1-based index).
    :return: int - –∑–Ω–∞—á–µ–Ω–∏–µ k-–≥–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """

    count = 0
    result: int | None = None

    def inorder(node: TreeNode) -> None:
        nonlocal count, result
        if not node or result is not None:
            return

        inorder(node.left)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤–ª–µ–≤–æ

        count += 1
        if count == k:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ k-–π —ç–ª–µ–º–µ–Ω—Ç
            result = node.val
            return

        inorder(node.right)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤–ø—Ä–∞–≤–æ

    inorder(root)
    return result  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ `k` –≤–∞–ª–∏–¥–µ–Ω


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
tree = TreeNode(3,
    TreeNode(1, None, TreeNode(2)),
    TreeNode(4)
)

print(kth_smallest(tree, 1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1
print(kth_smallest(tree, 2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2
print(kth_smallest(tree, 3))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3
print(kth_smallest(tree, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4


def kth_smallest_iterative(root: TreeNode, k: int) -> int:
    """
    –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ k-–≥–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ BST (—á–µ—Ä–µ–∑ —Å—Ç–µ–∫).

    :param root: TreeNode - –∫–æ—Ä–µ–Ω—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
    :param k: int - –Ω–æ–º–µ—Ä –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (1-based index).
    :return: int - –∑–Ω–∞—á–µ–Ω–∏–µ k-–≥–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """

    stack: list[TreeNode] = []
    node: TreeNode | None = root

    while True:
        while node:
            stack.append(node)
            node = node.left  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ

        node = stack.pop()  # –î–æ—Å—Ç–∞–µ–º —É–∑–µ–ª
        k -= 1

        if k == 0:
            return node.val  # –ù–∞—à–ª–∏ `k`-–π —ç–ª–µ–º–µ–Ω—Ç

        node = node.right  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
print(kth_smallest_iterative(tree, 1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1
print(kth_smallest_iterative(tree, 2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2
print(kth_smallest_iterative(tree, 3))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3
print(kth_smallest_iterative(tree, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(H + k), –≥–¥–µ `H` ‚Äî –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–µ–ª–∞–µ–º `k` –∏—Ç–µ—Ä–∞—Ü–∏–π.
  –í —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ `H = log n`, –≤ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ–º `H = n`, —Ç–∞–∫ —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º O(log n + k).
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
  - O(H) –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–∏–∑-–∑–∞ –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏).
  - O(H) –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–∏–∑-–∑–∞ —Å—Ç–µ–∫–∞).
"""
