def max_subarray(nums: list[int]) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ö–∞–¥–∞–Ω–µ.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (Kadane's Algorithm)**:
       - –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º `cur_sum` (—Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞).
       - –ï—Å–ª–∏ `cur_sum` < 0, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º (`cur_sum = 0`), —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã —É—Ö—É–¥—à–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
       - –û–±–Ω–æ–≤–ª—è–µ–º `max_sum` –ø—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –º–∞—Å—Å–∏–≤—É.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(1)`, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 2 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (`cur_sum` –∏ `max_sum`).

    :param nums: list[int] - –í—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤.
    :return: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.
    """
    max_sum = float('-inf')  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    cur_sum = 0

    for num in nums:
        cur_sum += num
        max_sum = max(max_sum, cur_sum)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
        if cur_sum < 0:
            cur_sum = 0  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

    return max_sum


# üîπ –¢–µ—Å—Ç—ã
print(max_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]))  # ‚úÖ 6
print(max_subarray([1]))  # ‚úÖ 1
print(max_subarray([5, 4, -1, 7, 8]))  # ‚úÖ 23
print(max_subarray([-1, -2, -3, -4]))  # ‚úÖ -1 (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å. —á–∏—Å–ª–æ)
print(max_subarray([2, -1, 2, 3, 4, -5, 1]))  # ‚úÖ 10
