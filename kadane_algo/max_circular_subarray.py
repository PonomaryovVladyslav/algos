def max_subarray_sum_circular(nums: list[int]) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ –≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–º –º–∞—Å—Å–∏–≤–µ.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º**:
       - **–û–±—ã—á–Ω—ã–π –ö–∞–¥–∞–Ω–µ (`kadane`)**: –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É.
       - **–ö–∞–¥–∞–Ω–µ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞ (`kadane(-nums)`)**: –ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É.
       - **–î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞**:
         1. `max_subarray`: –û–±—ã—á–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞.
         2. `total_sum - min_subarray`: –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ (—Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å).
       - –ï—Å–ª–∏ `max_subarray < 0`, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, —Ç–æ–≥–¥–∞ `max_subarray` ‚Äî –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–∏ –ª–∏–Ω–µ–π–Ω—ã—Ö –ø—Ä–æ—Ö–æ–¥–∞.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(1)`, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–æ–ø. —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.

    :param nums: list[int] - –í—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤.
    :return: int - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ (—É—á–∏—Ç—ã–≤–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å).
    """
    def kadane(arr):
        max_sum = cur_sum = arr[0]
        for num in arr[1:]:
            cur_sum = max(num, cur_sum + num)
            max_sum = max(max_sum, cur_sum)
        return max_sum

    total_sum = sum(nums)
    max_subarray = kadane(nums)  # –û–±—ã—á–Ω–∞—è –ö–∞–¥–∞–Ω–µ
    min_subarray = kadane([-num for num in nums])  # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É

    if max_subarray < 0:  # –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, –≤–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—ã–π –ö–∞–¥–∞–Ω–µ
        return max_subarray

    return max(max_subarray, total_sum + min_subarray)  # total_sum - (-min_subarray)


# üîπ –¢–µ—Å—Ç—ã
print(max_subarray_sum_circular([1, -2, 3, -2]))  # ‚úÖ 3
print(max_subarray_sum_circular([5, -3, 5]))  # ‚úÖ 10
print(max_subarray_sum_circular([-3, -2, -3]))  # ‚úÖ -2
print(max_subarray_sum_circular([3, -1, 2, -1]))  # ‚úÖ 4
print(max_subarray_sum_circular([10, -3, -2, 5, -3, 10]))  # ‚úÖ 22
