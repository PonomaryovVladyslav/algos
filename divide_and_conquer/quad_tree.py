# –ó–∞–¥–∞—á–∞: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å Quad-Tree –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –±–∏–Ω–∞—Ä–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ `grid`.
# –î–∞–Ω–æ: `grid` ‚Äî –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ `n x n`, –≥–¥–µ `grid[i][j]` ‚Äî 0 –∏–ª–∏ 1.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä–µ–Ω—å Quad-Tree, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —ç—Ç—É –º–∞—Ç—Ä–∏—Ü—É.

class Node:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ Quad-Tree.
    """

    def __init__(
            self,
            val: bool,
            is_leaf: bool,
            top_left: "Node" | None = None,
            top_right: "Node" | None = None,
            bottom_left: "Node" | None = None,
            bottom_right: "Node" | None = None
    ):
        self.val = val
        self.is_leaf = is_leaf
        self.top_left = top_left
        self.top_right = top_right
        self.bottom_left = bottom_left
        self.bottom_right = bottom_right


def construct(grid: list[list[int]]) -> Node:
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç Quad-Tree –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã `grid`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–µ—Å–ª–∏ –Ω–µ—Ç –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π).
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–µ—Å–ª–∏ –≤—Å–µ –ª–∏—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã).

    :param grid: list[list[int]] - –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ `n x n`.
    :return: Node - –∫–æ—Ä–µ–Ω—å Quad-Tree.
    """

    def is_uniform(r1: int, c1: int, r2: int, c2: int) -> tuple[bool, int | None]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–ª–∞—Å—Ç—å `grid[r1:r2, c1:c2]` –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π.

        :return: (True, value) - –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã.
                 (False, None) - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º–µ—à–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        """
        val = grid[r1][c1]
        for r in range(r1, r2):
            for c in range(c1, c2):
                if grid[r][c] != val:
                    return False, None
        return True, val  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º (is_leaf, –∑–Ω–∞—á–µ–Ω–∏–µ)

    def build(r1: int, c1: int, r2: int, c2: int) -> Node:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç Quad-Tree.

        :param r1: int - –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        :param c1: int - –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü.
        :param r2: int - –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        :param c2: int - –∫–æ–Ω–µ—á–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü.
        :return: Node - —É–∑–µ–ª Quad-Tree.
        """
        uniform, val = is_uniform(r1, c1, r2, c2)
        if uniform:
            return Node(val == 1, True)  # –õ–∏—Å—Ç (is_leaf=True)

        mid_r, mid_c = (r1 + r2) // 2, (c1 + c2) // 2

        return Node(
            True, False,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É–∑–µ–ª (is_leaf=False)
            build(r1, c1, mid_r, mid_c),  # –í–µ—Ä—Ö-–ª–µ–≤–æ
            build(r1, mid_c, mid_r, c2),  # –í–µ—Ä—Ö-–ø—Ä–∞–≤–æ
            build(mid_r, c1, r2, mid_c),  # –ù–∏–∑-–ª–µ–≤–æ
            build(mid_r, mid_c, r2, c2)  # –ù–∏–∑-–ø—Ä–∞–≤–æ
        )

    return build(0, 0, len(grid), len(grid))


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
grid = [
    [1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0]
]

quad_tree = construct(grid)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Quad-Tree
def serialize(node: Node | None) -> list | None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç Quad-Tree –≤ —Å–ø–∏—Å–æ–∫.

    :param node: Node | None - –∫–æ—Ä–µ–Ω—å Quad-Tree.
    :return: list - —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    """
    if not node:
        return None
    if node.is_leaf:
        return [1 if node.val else 0, 1]  # [val, is_leaf]
    return [0, 0, serialize(node.top_left), serialize(node.top_right),
            serialize(node.bottom_left), serialize(node.bottom_right)]


print(serialize(quad_tree))  # –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Quad-Tree

"""
üîπ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n¬≤)** –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
   - –ï—Å–ª–∏ `grid` —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ **—Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π**, –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ `n¬≤` —è—á–µ–µ–∫.
   - –í —Å—Ä–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ –±—ã—Å—Ç—Ä–µ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å **–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏**.

‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n¬≤)** –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
   - –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã **—Ä–∞–∑–Ω—ã–µ**, —Å–æ–∑–¥–∞—ë—Ç—Å—è `n¬≤` –ª–∏—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤.
   - –ï—Å–ª–∏ `grid` —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ **–µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è**, –∑–∞–Ω–∏–º–∞–µ–º **O(1)** –ø–∞–º—è—Ç–∏.

üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?**
1Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –æ–±–ª–∞—Å—Ç—å –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π**.  
   - –ï—Å–ª–∏ –¥–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º **–ª–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª**.  
   - –ï—Å–ª–∏ –Ω–µ—Ç ‚Üí **—Ä–∞–∑–±–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ 4 —á–∞—Å—Ç–∏**.  
2Ô∏è‚É£ **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º Quad-Tree** –¥–ª—è 4 –∫–≤–∞–¥—Ä–∞–Ω—Ç–æ–≤.  
3Ô∏è‚É£ **–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞**.

üí° **–ö–æ–≥–¥–∞ Quad-Tree –ø–æ–ª–µ–∑–µ–Ω?**
- **–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —á—ë—Ä–Ω–æ-–±–µ–ª—ã—Ö –∫–∞—Ä—Ç).  
- **–ì–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∫–∞—Ä—Ç).  
- **–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è 2D-–æ–±—ä–µ–∫—Ç–æ–≤).  

"""
