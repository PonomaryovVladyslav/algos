# üîπ –ó–∞–¥–∞—á–∞: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ `nums` –≤ **—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ (BST)**.
# üîπ –î–∞–Ω–æ: `nums` ‚Äî —Å–ø–∏—Å–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
# üîπ –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å **–∫–æ—Ä–µ–Ω—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ BST**.

class TreeNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    """
    def __init__(self, val: int = 0, left: "TreeNode" | None = None, right: "TreeNode" | None = None):
        self.val = val
        self.left = left
        self.right = right


def sorted_list_to_bst(nums: list[int]) -> TreeNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ (BST) –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º:
       1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º **—Å—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç** `mid` –∫–∞–∫ –∫–æ—Ä–µ–Ω—å BST.
       2Ô∏è‚É£ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º **–ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ** –∏–∑ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã `nums[:mid]`.
       3Ô∏è‚É£ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º **–ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ** –∏–∑ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã `nums[mid+1:]`.
       4Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ —Å–ø–∏—Å–æ–∫ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç—ã–º.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **—Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑**.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(log n)**, —Ç–∞–∫ –∫–∞–∫ –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ **O(log n)**.

    :param nums: list[int] - –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
    :return: TreeNode | None - –∫–æ—Ä–µ–Ω—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ BST.
    """

    def generate_node(left: int, right: int) -> TreeNode | None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BST.

        :param left: int - –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.
        :param right: int - –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.
        :return: TreeNode | None - –∫–æ—Ä–µ–Ω—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞.
        """
        if left > right:  # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π (–ø—É—Å—Ç–æ–π –ø–æ–¥–º–∞—Å—Å–∏–≤)
            return None

        mid: int = (left + right) // 2  # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –∫–∞–∫ –∫–æ—Ä–µ–Ω—å
        node: TreeNode = TreeNode(nums[mid])

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
        node.left = generate_node(left, mid - 1)
        node.right = generate_node(mid + 1, right)

        return node

    return generate_node(0, len(nums) - 1)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
l1 = [-6, -3, -1, 0, 3, 4, 10, 25]

bst_root = sorted_list_to_bst(l1)
print(bst_root)  # –í—ã–≤–æ–¥ –æ–±—ä–µ–∫—Ç–∞ TreeNode (–∫–æ—Ä–Ω—è BST)
print("–ì–æ—Ç–æ–≤–æ")

"""
üîπ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**
   - –ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–æ–≤–Ω–æ **n —É–∑–ª–æ–≤**.
   - –ö–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞ **O(1)**.
   - –ò—Ç–æ–≥–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n)**.

‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(log n)**
   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ **O(log n)** (–ø–æ–ª–æ–≤–∏–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞).
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º **O(1)** –¥–æ–ø. –ø–∞–º—è—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã.

üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?**
1Ô∏è‚É£ **–í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞** –∫–∞–∫ –∫–æ—Ä–µ–Ω—å.  
2Ô∏è‚É£ **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ** –∏–∑ **–ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã** —Å–ø–∏—Å–∫–∞.  
3Ô∏è‚É£ **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ** –∏–∑ **–≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã** —Å–ø–∏—Å–∫–∞.  
4Ô∏è‚É£ **–ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–º –≤—Å—ë –¥–µ—Ä–µ–≤–æ**.  

üí° **–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
- –û–Ω **–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å** BST, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–µ–¥–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ—Ä–Ω–µ–º.
- **–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫** (`mid = (left + right) // 2`) –¥–∞—ë—Ç **–æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞**.

"""
