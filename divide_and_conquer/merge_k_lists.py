from heapq import heappush, heappop


# –ó–∞–¥–∞—á–∞: –°–ª–∏—Ç—å `k` –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
# –î–∞–Ω–æ: —Å–ø–∏—Å–æ–∫ `lists`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `k` –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –≥–æ–ª–æ–≤—É **–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞**.

class ListNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    def __init__(self, val: int = 0, next: "ListNode" | None = None):
        self.val = val
        self.next = next

    def __lt__(self, other: "ListNode") -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è heapq (–Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫—É—á–∏).
        """
        return self.val < other.val


def merge_k_lists(lists: list[ListNode | None]) -> ListNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç `k` –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç `heapq`).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(N log k), –≥–¥–µ `N` ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, `k` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(k), —Ç–∞–∫ –∫–∞–∫ –≤ –∫—É—á–µ —Ö—Ä–∞–Ω—è—Ç—Å—è `k` —É–∑–ª–æ–≤.

    :param lists: list[ListNode | None] - —Å–ø–∏—Å–æ–∫ `k` –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
    :return: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """

    heap: list[ListNode] = []

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É—á—É –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for l in lists:
        if l:
            heappush(heap, l)

    dummy: ListNode = ListNode(0)
    cur: ListNode = dummy

    # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    while heap:
        node: ListNode = heappop(heap)
        cur.next = node
        cur = cur.next
        if node.next:
            heappush(heap, node.next)

    return dummy.next


def list_to_linked(lst: list[int]) -> ListNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.

    :param lst: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
    :return: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    dummy: ListNode = ListNode()
    cur: ListNode = dummy
    for val in lst:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next


def linked_to_list(head: ListNode | None) -> list[int]:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫.

    :param head: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :return: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    result: list[int] = []
    while head:
        result.append(head.val)
        head = head.next
    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
lists = [
    list_to_linked([1, 4, 5]),
    list_to_linked([1, 3, 4]),
    list_to_linked([2, 6])
]

merged_head = merge_k_lists(lists)
print(linked_to_list(merged_head))  # ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 1, 2, 3, 4, 4, 5, 6]


"""
üîπ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(N log k)**
   - `N` ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö.
   - `k` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
   - –ö–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∫—É—á–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞ **O(log k)**, –∞ –≤—Å—Ç–∞–≤–ª—è–µ–º **–≤—Å–µ–≥–æ `N` —É–∑–ª–æ–≤**.

‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(k)**
   - –í –∫—É—á–µ **–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è `k` —É–∑–ª–æ–≤**.

üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `heapq`?**
1Ô∏è‚É£ **–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Å–µ—Ö `k` —Å–ø–∏—Å–∫–æ–≤** –≤ –∫—É—á—É `heap`.  
2Ô∏è‚É£ **–ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç**, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.  
3Ô∏è‚É£ **–ï—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å `next`**, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—É—á—É.  
4Ô∏è‚É£ **–ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –∫—É—á–∞ –Ω–µ –ø—É—Å—Ç–∞**.  

üí° **–ü–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `heapq`?**
- **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º—É–º –∑–∞ O(1)**.
- **–í—Å—Ç–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞ O(log k)**.
- –†–∞–±–æ—Ç–∞–µ—Ç **–ª—É—á—à–µ, —á–µ–º O(kN) –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Å–ª–∏—è–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤**.

"""
