# –ó–∞–¥–∞—á–∞: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.
# –î–∞–Ω–æ: `head` ‚Äî –≥–æ–ª–æ–≤–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –≥–æ–ª–æ–≤—É **–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞**.

class ListNode:
    """
    –ö–ª–∞—Å—Å —É–∑–ª–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    def __init__(self, val: int = 0, next: "ListNode" = None):
        self.val = val
        self.next = next


def sort_list(head: ListNode) -> ListNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–∏—è–Ω–∏–µ–º).

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–∏—è–Ω–∏–µ–º.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n), —Ç–∞–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã.

    :param head: ListNode - –≥–æ–ª–æ–≤–∞ –Ω–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :return: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """

    if not head or not head.next:
        return head  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 1 —ç–ª–µ–º–µ–Ω—Ç–∞

    # 1. –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ (–∏—â–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É)
    slow, fast = head, head.next
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    mid: ListNode = slow.next
    slow.next = None  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–≤—è–∑—å (–¥–µ–ª–∞–µ–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞)

    # 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—ã
    left: ListNode = sort_list(head)
    right: ListNode = sort_list(mid)

    # 3. –°–ª–∏–≤–∞–µ–º –¥–≤–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–≤–∏–Ω—ã
    return merge(left, right)


def merge(l1: ListNode | None, l2: ListNode | None) -> ListNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–ª–∏–≤–∞–µ—Ç –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —É–∑–ª—É –æ–¥–∏–Ω —Ä–∞–∑.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç–µ–ª–∏.

    :param l1: ListNode | None - –≥–æ–ª–æ–≤–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :param l2: ListNode | None - –≥–æ–ª–æ–≤–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :return: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """

    dummy: ListNode = ListNode(0)
    cur: ListNode = dummy

    while l1 and l2:
        if l1.val < l2.val:
            cur.next, l1 = l1, l1.next
        else:
            cur.next, l2 = l2, l2.next
        cur = cur.next

    cur.next = l1 if l1 else l2  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    return dummy.next


def list_to_linked(lst: list[int]) -> ListNode | None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.

    :param lst: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
    :return: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    dummy: ListNode = ListNode()
    cur: ListNode = dummy
    for val in lst:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next


def linked_to_list(head: ListNode | None) -> list[int]:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫.

    :param head: ListNode | None - –≥–æ–ª–æ–≤–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :return: list[int] - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    result: list[int] = []
    while head:
        result.append(head.val)
        head = head.next
    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
head1 = list_to_linked([4, 2, 1, 3])
sorted_head1 = sort_list(head1)
print(linked_to_list(sorted_head1))  # ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3, 4]

head2 = list_to_linked([-1, 5, 3, 4, 0])
sorted_head2 = sort_list(head2)
print(linked_to_list(sorted_head2))  # ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [-1, 0, 3, 4, 5]


"""
üîπ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n log n)**
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º **—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π** (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–∏—è–Ω–∏–µ–º).
   - –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ **log n —Ä–∞–∑**, –∞ —Å–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–Ω–∏–º–∞–µ—Ç **O(n)**.
   - –ò—Ç–æ–≥–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(n log n)**.

‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(log n)**
   - –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ **log n** (–∏–∑-–∑–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è).
   - –°–ª–∏—è–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç **O(1)** –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏.

üìå **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?**
1Ô∏è‚É£ **–†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫** –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è `slow` –∏ `fast`).  
2Ô∏è‚É£ **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º** –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É.  
3Ô∏è‚É£ **–û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏** —Å –ø–æ–º–æ—â—å—é –¥–≤—É—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π.

üí° **–ü–æ—á–µ–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º?**
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ **O(n log n)** –≤ **—Å—Ä–µ–¥–Ω–µ–º –∏ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ**.
- **–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç** –¥–ª—è **—Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤**, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

"""
