# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–∏–∫–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
# –î–∞–Ω–æ: –º–∞—Å—Å–∏–≤ `nums`, –≤ –∫–æ—Ç–æ—Ä–æ–º `nums[i]` ‚â† `nums[i+1]` –¥–ª—è –≤—Å–µ—Ö `i`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å `i`, –≥–¥–µ `nums[i]` ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∏–∫ (nums[i] > nums[i-1] –∏ nums[i] > nums[i+1]).

def find_peak_element(nums: list[int]) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å –ø–∏–∫–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ `nums`.

    :param nums: list[int] - —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
    :return: int - –∏–Ω–¥–µ–∫—Å –ø–∏–∫–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """

    left, right = 0, len(nums) - 1  # –ì—Ä–∞–Ω–∏—Ü—ã –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

    while left < right:
        mid = (left + right) // 2  # –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å

        if nums[mid] < nums[mid + 1]:  # –ï—Å–ª–∏ –ø—Ä–∞–≤—ã–π —Å–æ—Å–µ–¥ –±–æ–ª—å—à–µ ‚Äî –ø–∏–∫ —Å–ø—Ä–∞–≤–∞
            left = mid + 1
        else:  # –ï—Å–ª–∏ `nums[mid] > nums[mid + 1]`, —Ç–æ –ø–∏–∫ —Å–ª–µ–≤–∞ –∏–ª–∏ –≤ `mid`
            right = mid

    return left  # `left == right`, –∑–Ω–∞—á–∏—Ç –Ω–∞—à–ª–∏ –ø–∏–∫


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(find_peak_element([1, 2, 3, 1]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2
print(find_peak_element([1, 2, 1, 3, 5, 6, 4]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1 –∏–ª–∏ 5
print(find_peak_element([10, 20, 15, 2, 23, 90, 67]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1, 5 –∏–ª–∏ 6
print(find_peak_element([1]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0 (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç)

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å.
"""
