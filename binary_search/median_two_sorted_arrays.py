# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –º–µ–¥–∏–∞–Ω—É –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
# –î–∞–Ω–æ: –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞ `nums1` –∏ `nums2`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –º–µ–¥–∏–∞–Ω—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (–±–µ–∑ –µ–≥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è).

def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞–Ω—É –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ `nums1` –∏ `nums2`.

    :param nums1: list[int] - –ø–µ—Ä–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
    :param nums2: list[int] - –≤—Ç–æ—Ä–æ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
    :return: float - –º–µ–¥–∏–∞–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
    """

    if len(nums1) > len(nums2):  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ `nums1` –∫–æ—Ä–æ—á–µ `nums2`
        nums1, nums2 = nums2, nums1

    m, n = len(nums1), len(nums2)
    left_size = (m + n + 1) // 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    left, right = 0, m  # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ `nums1`

    while left <= right:
        i = (left + right) // 2  # –†–∞–∑–¥–µ–ª—è–µ–º `nums1`
        j = left_size - i  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ `nums2`

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        nums1_left = nums1[i - 1] if i > 0 else float('-inf')
        nums1_right = nums1[i] if i < m else float('inf')
        nums2_left = nums2[j - 1] if j > 0 else float('-inf')
        nums2_right = nums2[j] if j < n else float('inf')

        if nums1_left <= nums2_right and nums2_left <= nums1_right:
            # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—á–µ—Ç–Ω–æ–µ, –º–µ–¥–∏–∞–Ω–∞ ‚Äî –º–∞–∫—Å–∏–º—É–º –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
            if (m + n) % 2 == 1:
                return max(nums1_left, nums2_left)
            # –ï—Å–ª–∏ —á–µ—Ç–Ω–æ–µ ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –¥–≤—É—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            return (max(nums1_left, nums2_left) + min(nums1_right, nums2_right)) / 2

        elif nums1_left > nums2_right:  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ
            right = i - 1
        else:  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ
            left = i + 1

    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")  # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å)


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(find_median_sorted_arrays([1, 3], [2]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2.0
print(find_median_sorted_arrays([1, 2], [3, 4]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2.5
print(find_median_sorted_arrays([0, 0], [0, 0]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.0
print(find_median_sorted_arrays([], [1]))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1.0
print(find_median_sorted_arrays([2], []))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2.0

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log(min(m, n))), —Ç–∞–∫ –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –º–µ–Ω—å—à–µ–º—É –º–∞—Å—Å–∏–≤—É.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å.
"""
