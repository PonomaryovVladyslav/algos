# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å—ã `target` –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ `nums`.
# –î–∞–Ω–æ: –º–∞—Å—Å–∏–≤ `nums`, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –∏ —á–∏—Å–ª–æ `target`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `[first, last]` ‚Äî –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å `target`, –∏–ª–∏ `[-1, -1]`, –µ—Å–ª–∏ `target` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

def search_range(nums: list[int], target: int) -> list[int]:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å `target` –≤ `nums`.

    :param nums: list[int] - –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
    :param target: int - –∏—Å–∫–æ–º–æ–µ —á–∏—Å–ª–æ.
    :return: list[int] - `[first, last]` –∏–ª–∏ `[-1, -1]`, –µ—Å–ª–∏ `target` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """

    def find_first(nums: list[int], target: int) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å `target` –≤ `nums` —Å –ø–æ–º–æ—â—å—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        left, right = 0, len(nums) - 1
        first = -1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] >= target:  # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                right = mid - 1
            else:
                left = mid + 1
            if nums[mid] == target:
                first = mid  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å
        return first

    def find_last(nums: list[int], target: int) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å `target` –≤ `nums` —Å –ø–æ–º–æ—â—å—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        left, right = 0, len(nums) - 1
        last = -1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] <= target:  # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                left = mid + 1
            else:
                right = mid - 1
            if nums[mid] == target:
                last = mid  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å
        return last

    first = find_first(nums, target)
    if first == -1:
        return [-1, -1]  # –ï—Å–ª–∏ `target` –Ω–µ –Ω–∞–π–¥–µ–Ω

    last = find_last(nums, target)
    return [first, last]


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(search_range([5, 7, 7, 8, 8, 10], 8))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [3, 4]
print(search_range([5, 7, 7, 8, 8, 10], 6))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [-1, -1]
print(search_range([], 0))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [-1, -1]
print(search_range([1, 2, 3, 4, 5, 5, 5, 6, 7], 5))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [4, 6]

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–∞.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å.
"""
