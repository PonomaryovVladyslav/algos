def is_subsequence(s: str, t: str) -> bool:
    """
    Проверить, является ли строка `s` подпоследовательностью строки `t`.

    Подпоследовательность — это последовательность символов, которая встречается
    в той же последовательности, но не обязательно подряд.

    Вход:
    s = "abc", t = "ahbgdc"
    Выход: True (abc есть в ahbgdc в порядке следования)

    Вход:
    s = "axc", t = "ahbgdc"
    Выход: False (x не встречается в ahbgdc)

    Решение:
    - Используем два указателя `i` (для s) и `j` (для t).
    - Двигаемся по `t`, проверяя, совпадает ли `s[i]` с `t[j]`.
    - Если `s[i]` найдено в `t`, двигаем `i` дальше.
    - В конце, если `i == len(s)`, значит `s` — подпоследовательность.

    Время: O(n), где n — длина `t` (линейный проход).
    Пространство: O(1) (используем только переменные).
    """

    i = 0  # Указатель на s
    j = 0  # Указатель на t

    while i < len(s) and j < len(t):
        if s[i] == t[j]:  # Если символ совпадает, двигаем `i`
            i += 1
        j += 1  # Всегда двигаем `j`

    return i == len(s)  # Проверяем, дошли ли до конца `s`


# Тесты
print(is_subsequence("abc", "ahbgdc"))  # True
print(is_subsequence("axc", "ahbgdc"))  # False
print(is_subsequence("", "ahbgdc"))  # True (пустая строка — подпоследовательность любой строки)
print(is_subsequence("b", "abc"))  # True
print(is_subsequence("abc", "abc"))  # True
print(is_subsequence("acb", "ahbgdc"))  # False (не в правильном порядке)
