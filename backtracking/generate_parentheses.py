# –ó–∞–¥–∞—á–∞: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–∫–æ–±–æ—á–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª–∏–Ω—ã `2 * n`.
# –î–∞–Ω–æ: —á–∏—Å–ª–æ `n`, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–∫–æ–±–æ–∫.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–∫–æ–±–æ–∫.

def generate_parenthesis(n: int) -> list[str]:
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–∫–æ–±–æ—á–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª–∏–Ω—ã `2 * n`.

    :param n: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–∫–æ–±–æ–∫.
    :return: list[str] - —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–∫–æ–±–æ–∫.
    """

    result: list[str] = []  # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π

    def backtrack(path: list[str], open_count: int, close_count: int) -> None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å–∫–æ–±–æ–∫.

        :param path: list[str] - —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫.
        :param open_count: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –≤ path.
        :param close_count: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –≤ path.
        """

        if len(path) == 2 * n:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
            result.append("".join(path))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return

        if open_count < n:  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å '('
            path.append("(")
            backtrack(path, open_count + 1, close_count)
            path.pop()  # –û—Ç–∫–∞—Ç (backtracking)

        if close_count < open_count:  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ')', –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö –º–µ–Ω—å—à–µ, —á–µ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö
            path.append(")")
            backtrack(path, open_count, close_count + 1)
            path.pop()  # –û—Ç–∫–∞—Ç (backtracking)

    backtrack([], 0, 0)
    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(generate_parenthesis(3))
# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["((()))", "(()())", "(())()", "()(())", "()()()"]

print(generate_parenthesis(1))
# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["()"]

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(4^n / sqrt(n)), —Ç–∞–∫ –∫–∞–∫ –º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ `n`.
"""
