# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–≤–æ `word` –≤ –¥–≤—É–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ `board`.
# –î–∞–Ω–æ: `board` - –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ `word` - —Å—Ç—Ä–æ–∫–∞.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å `True`, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É–∫–≤ –Ω–∞ –¥–æ—Å–∫–µ,
# –¥–≤–∏–≥–∞—è—Å—å –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º –∫–ª–µ—Ç–∫–∞–º (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏.

def exist(board: list[list[str]], word: str) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ `word` –≤ `board` –ø—É—Ç–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º –∫–ª–µ—Ç–∫–∞–º (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è—á–µ–µ–∫.

    :param board: list[list[str]] - –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–∫–≤.
    :param word: str - —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.
    :return: bool - True, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∞—á–µ False.
    """

    rows, cols = len(board), len(board[0])  # –†–∞–∑–º–µ—Ä—ã –¥–æ—Å–∫–∏

    def backtrack(r: int, c: int, index: int) -> bool:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ `word` –≤ `board`.

        :param r: int - —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞.
        :param c: int - —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü.
        :param index: int - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–ª–æ–≤–µ `word`.
        :return: bool - True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ, –∏–Ω–∞—á–µ False.
        """

        if index == len(word):  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤—Å—ë —Å–ª–æ–≤–æ
            return True
        if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]:
            return False  # –í—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –±—É–∫–≤–∞

        # –ü–æ–º–µ—á–∞–µ–º —è—á–µ–π–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        temp, board[r][c] = board[r][c], '#'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –≤–Ω–∏–∑, –≤–≤–µ—Ä—Ö, –≤–ø—Ä–∞–≤–æ, –≤–ª–µ–≤–æ
        found = (
            backtrack(r + 1, c, index + 1) or
            backtrack(r - 1, c, index + 1) or
            backtrack(r, c + 1, index + 1) or
            backtrack(r, c - 1, index + 1)
        )

        board[r][c] = temp  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É–∫–≤—É –ø–æ—Å–ª–µ —Ä–µ–∫—É—Ä—Å–∏–∏
        return found

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
    for r in range(rows):
        for c in range(cols):
            if board[r][c] == word[0] and backtrack(r, c, 0):
                return True

    return False


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
board1 = [
  ['A', 'B', 'C', 'E'],
  ['S', 'F', 'C', 'S'],
  ['A', 'D', 'E', 'E']
]
word1 = "ABCCED"
word2 = "SEE"
word3 = "ABCB"

print(exist(board1, word1))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(exist(board1, word2))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: True
print(exist(board1, word3))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: False

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m * n * 4^k), –≥–¥–µ `m √ó n` ‚Äî —Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏, `k` ‚Äî –¥–ª–∏–Ω–∞ `word`.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(k), —Ç–∞–∫ –∫–∞–∫ –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ `len(word)`.
"""
