# –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —á–∏—Å–µ–ª, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ `target`.
# –î–∞–Ω–æ: —Å–ø–∏—Å–æ–∫ `candidates`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∏ `target`.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –≥–¥–µ —á–∏—Å–ª–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.

def combination_sum(candidates: list[int], target: int) -> list[list[int]]:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —á–∏—Å–µ–ª –∏–∑ `candidates`,
    —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ `target`. –û–¥–Ω–æ –∏ —Ç–æ –∂–µ —á–∏—Å–ª–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.

    :param candidates: list[int] - —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —á–∏—Å–µ–ª.
    :param target: int - —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞.
    :return: list[list[int]] - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.
    """

    result: list[list[int]] = []  # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π

    def backtrack(start: int, path: list[int], total: int) -> None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.

        :param start: int - –∏–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä.
        :param path: list[int] - —Ç–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —á–∏—Å–µ–ª.
        :param total: int - —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ —á–∏—Å–µ–ª –≤ `path`.
        """

        if total == target:  # –ï—Å–ª–∏ —Å—É–º–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ `target`
            result.append(path[:])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            return
        if total > target:  # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ `target`, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–µ—Ç–∫—É
            return

        for i in range(start, len(candidates)):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞
            path.append(candidates[i])  # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            backtrack(i, path, total + candidates[i])  # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
            path.pop()  # –û—Ç–∫–∞—Ç (backtracking)

    backtrack(0, [], 0)
    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(combination_sum([2, 3, 6, 7], 7))
# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [[2,2,3], [7]]

print(combination_sum([2, 3, 5], 8))
# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [[2,2,2,2], [2,3,3], [3,5]]

print(combination_sum([2], 1))
# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: []

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(2^t), –≥–¥–µ `t` ‚Äî —Ü–µ–ª–µ–≤–æ–π `target`, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Ä–∞–∑–º–µ—Ä–æ–º `target / min(candidates)`.
"""
