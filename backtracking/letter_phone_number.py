# –ó–∞–¥–∞—á–∞: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
# –î–∞–Ω–æ: —Å—Ç—Ä–æ–∫–∞ `digits`, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ü–∏—Ñ—Ä –æ—Ç 2 –¥–æ 9.
# –ù—É–∂–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º.

def letter_combinations(digits: str) -> list[str]:
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä.

    :param digits: str - —Å—Ç—Ä–æ–∫–∞ —Ü–∏—Ñ—Ä –æ—Ç 2 –¥–æ 9.
    :return: list[str] - —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –±—É–∫–≤.
    """

    if not digits:
        return []  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    phone_map: dict[str, str] = {
        "2": "abc", "3": "def", "4": "ghi", "5": "jkl",
        "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"
    }

    result: list[str] = []  # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π

    def backtrack(index: int, path: list[str]) -> None:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.

        :param index: int - —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ `digits`.
        :param path: list[str] - —Ç–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –±—É–∫–≤.
        """

        if index == len(digits):  # –î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result.append("".join(path))
            return

        for letter in phone_map[digits[index]]:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–∏—Ñ—Ä–µ
            backtrack(index + 1, path + [letter])  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å –Ω–æ–≤–æ–π –±—É–∫–≤–æ–π

    backtrack(0, [])
    return result


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
print(letter_combinations("23"))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
print(letter_combinations(""))    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: []
print(letter_combinations("2"))   # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["a", "b", "c"]

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(4^n), –≥–¥–µ `n` ‚Äî –¥–ª–∏–Ω–∞ `digits`, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –¥–æ 4 –±—É–∫–≤.
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), —Ç–∞–∫ –∫–∞–∫ –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ `n`.
"""
