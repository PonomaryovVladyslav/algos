# –ó–∞–¥–∞—á–∞: –†–µ—à–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –°—É–¥–æ–∫—É.
# –î–∞–Ω–æ: `board` ‚Äî 9x9 –¥–æ—Å–∫–∞ –°—É–¥–æ–∫—É, –≥–¥–µ '.' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏.
# –ù—É–∂–Ω–æ: –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã —Å–æ–±–ª—é–¥–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞ –°—É–¥–æ–∫—É.

def solve_sudoku(board: list[list[str]]) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ—à–∞–µ—Ç –°—É–¥–æ–∫—É –Ω–∞ –º–µ—Å—Ç–µ, –∏–∑–º–µ–Ω—è—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é `board`.

    :param board: list[list[str]] - 9x9 –¥–æ—Å–∫–∞ –°—É–¥–æ–∫—É.
    :return: None (–∏–∑–º–µ–Ω—è–µ—Ç `board` –Ω–∞ –º–µ—Å—Ç–µ).
    """

    def is_valid(row: int, col: int, num: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ `num` –≤ —è—á–µ–π–∫—É `board[row][col]`.

        :param row: int - —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å–∫–∏.
        :param col: int - –∫–æ–ª–æ–Ω–∫–∞ –¥–æ—Å–∫–∏.
        :param num: int - —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Ç 1 –¥–æ 9).
        :return: bool - True, –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å, –∏–Ω–∞—á–µ False.
        """

        num = str(num)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞
        for i in range(9):
            if board[row][i] == num or board[i][col] == num:
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3x3 —Å–µ–∫—Ç–æ—Ä–∞
        start_row, start_col = (row // 3) * 3, (col // 3) * 3
        for i in range(3):
            for j in range(3):
                if board[start_row + i][start_col + j] == num:
                    return False

        return True

    def backtrack() -> bool:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è –°—É–¥–æ–∫—É.

        :return: bool - True, –µ—Å–ª–∏ –°—É–¥–æ–∫—É —Ä–µ—à–µ–Ω–æ, –∏–Ω–∞—á–µ False.
        """

        for row in range(9):
            for col in range(9):
                if board[row][col] == ".":  # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                    for num in range(1, 10):  # –ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 9
                        if is_valid(row, col, num):
                            board[row][col] = str(num)  # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫—É

                            if backtrack():  # –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–∏
                                return True  # –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True

                            board[row][col] = "."  # –û—Ç–∫–∞—Ç (Backtracking)

                    return False  # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False

        return True  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏, –∑–Ω–∞—á–∏—Ç –°—É–¥–æ–∫—É —Ä–µ—à–µ–Ω–æ

    backtrack()


# üîπ –ü—Ä–∏–º–µ—Ä –°—É–¥–æ–∫—É
sudoku_board: list[list[str]] = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]

solve_sudoku(sudoku_board)

# üîπ –í—ã–≤–æ–¥–∏–º —Ä–µ—à–µ–Ω–∏–µ
for row in sudoku_board:
    print(" ".join(row))

"""
–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(9^(n*n)), –≥–¥–µ `n = 9` (–∏–∑-–∑–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π).
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏.
"""
