from collections import deque


def min_mutation(start_gene: str, end_gene: str, bank: list[str]) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–∞—Ü–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è start_gene –≤ end_gene.

    üîπ **–ê–ª–≥–æ—Ä–∏—Ç–º (BFS, O(m * n))**:
    1Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `bank` –≤ `set` –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º BFS:
       - –í –æ—á–µ—Ä–µ–¥–∏ `deque([(–≥–µ–Ω, —à–∞–≥–∏)])` —Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π –≥–µ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤.
       - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å **–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª** –Ω–∞ {A, C, G, T}.
       - –ï—Å–ª–∏ –º—É—Ç–∞—Ü–∏—è –µ—Å—Ç—å –≤ `bank`, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å.
    3Ô∏è‚É£ –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ `end_gene`, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤.
    4Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `-1`.

    üîπ **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(m * n)`, –≥–¥–µ `m` ‚Äî –¥–ª–∏–Ω–∞ –≥–µ–Ω–∞ (8), `n` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–æ–≤ –≤ `bank`.

    üîπ **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**:
       - `O(n)`, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º `bank` –∏ `queue`.

    :param start_gene: str - –ò—Å—Ö–æ–¥–Ω—ã–π –≥–µ–Ω.
    :param end_gene: str - –¶–µ–ª–µ–≤–æ–π –≥–µ–Ω.
    :param bank: list[str] - –î–æ—Å—Ç—É–ø–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏.
    :return: int - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–∞—Ü–∏–π –∏–ª–∏ `-1`, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.
    """
    if end_gene not in bank:
        return -1  # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –≥–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–Ω–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω

    bank = set(bank)  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º bank –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    queue = deque([(start_gene, 0)])  # (–≥–µ–Ω, –∫–æ–ª-–≤–æ –º—É—Ç–∞—Ü–∏–π)
    possible_chars = ['A', 'C', 'G', 'T']

    while queue:
        gene, mutations = queue.popleft()

        if gene == end_gene:
            return mutations  # –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏

        # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤ –≥–µ–Ω–µ
        for i in range(len(gene)):
            for char in possible_chars:
                if char != gene[i]:  # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –¥—Ä—É–≥—É—é –±—É–∫–≤—É
                    new_gene = gene[:i] + char + gene[i + 1:]

                    if new_gene in bank:  # –ï—Å–ª–∏ –º—É—Ç–∞—Ü–∏—è –¥–æ–ø—É—Å—Ç–∏–º–∞
                        queue.append((new_gene, mutations + 1))
                        bank.remove(new_gene)  # –£–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π

    return -1  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—É—Ç—å


# üîπ –¢–µ—Å—Ç—ã
print(min_mutation("AACCGGTT", "AACCGGTA", ["AACCGGTA"]))  # ‚úÖ 1
print(min_mutation("AACCGGTT", "AAACGGTA", ["AACCGGTA", "AACCGCTA", "AAACGGTA"]))  # ‚úÖ 2
print(min_mutation("AACCGGTT", "AACCGCTA", ["AACCGGTA"]))  # ‚úÖ -1
